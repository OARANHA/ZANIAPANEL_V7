[
  {
    "categoria": "agentflow",
    "label": "Agent",
    "desc": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
    "path": "Flowise/packages/components/nodes/agentflow/Agent/Agent.ts",
    "inputs": "{ label: 'Model', name: 'agentModel', type: 'asyncOptions', loadMethod: 'listModels', loadConfig: true }, { label: 'Messages', name: 'agentMessages', type: 'array', optional: true, acceptVariable: true, array: [ { label: 'Role', name: 'role', type: 'options', options: [ { label: 'System', name: 'system' }, { label: 'Assistant', name: 'assistant' }, { label: 'Developer', name: 'developer' }, { labe",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Condition",
    "desc": "Values to compare",
    "path": "Flowise/packages/components/nodes/agentflow/Condition/Condition.ts",
    "inputs": "{ label: 'Conditions', name: 'conditions', type: 'array', description: 'Values to compare', acceptVariable: true, default: [ { type: 'string', value1: '', operation: 'equal', value2: '' }",
    "outputs": "{ label: '0', name: '0', description: 'Condition 0' }, { label: '1', name: '1', description: 'Else' }"
  },
  {
    "categoria": "agentflow",
    "label": "Condition Agent",
    "desc": "A general instructions of what the condition agent should do",
    "path": "Flowise/packages/components/nodes/agentflow/ConditionAgent/ConditionAgent.ts",
    "inputs": "{ label: 'Model', name: 'conditionAgentModel', type: 'asyncOptions', loadMethod: 'listModels', loadConfig: true }, { label: 'Instructions', name: 'conditionAgentInstructions', type: 'string', description: 'A general instructions of what the condition agent should do', rows: 4, acceptVariable: true, placeholder: 'Determine if the user is interested in learning about AI' }, { label: 'Input', name: '",
    "outputs": "{ label: '0', name: '0', description: 'Condition 0' }, { label: '1', name: '1', description: 'Else' }"
  },
  {
    "categoria": "agentflow",
    "label": "Custom Function",
    "desc": "Execute custom function",
    "path": "Flowise/packages/components/nodes/agentflow/CustomFunction/CustomFunction.ts",
    "inputs": "{ label: 'Input Variables', name: 'customFunctionInputVariables', description: 'Input variables can be used in the function with prefix $. For example: $foo', type: 'array', optional: true, acceptVariable: true, array: [ { label: 'Variable Name', name: 'variableName', type: 'string' }, { label: 'Variable Value', name: 'variableValue', type: 'string', acceptVariable: true }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Direct Reply",
    "desc": "Directly reply to the user with a message",
    "path": "Flowise/packages/components/nodes/agentflow/DirectReply/DirectReply.ts",
    "inputs": "{ label: 'Message', name: 'directReplyMessage', type: 'string', rows: 4, acceptVariable: true }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Execute Flow",
    "desc": "Execute another flow",
    "path": "Flowise/packages/components/nodes/agentflow/ExecuteFlow/ExecuteFlow.ts",
    "inputs": "{ label: 'Select Flow', name: 'executeFlowSelectedFlow', type: 'asyncOptions', loadMethod: 'listFlows' }, { label: 'Input', name: 'executeFlowInput', type: 'string', rows: 4, acceptVariable: true }, { label: 'Override Config', name: 'executeFlowOverrideConfig', description: 'Override the config passed to the flow', type: 'json', optional: true, acceptVariable: true }, { label: 'Base URL', name: 'e",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "HTTP",
    "desc": "Send a HTTP request",
    "path": "Flowise/packages/components/nodes/agentflow/HTTP/HTTP.ts",
    "inputs": "{ label: 'Method', name: 'method', type: 'options', options: [ { label: 'GET', name: 'GET' }, { label: 'POST', name: 'POST' }, { label: 'PUT', name: 'PUT' }, { label: 'DELETE', name: 'DELETE' }, { label: 'PATCH', name: 'PATCH' }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Human Input",
    "desc": "Request human input, approval or rejection during execution",
    "path": "Flowise/packages/components/nodes/agentflow/HumanInput/HumanInput.ts",
    "inputs": "{ label: 'Description Type', name: 'humanInputDescriptionType', type: 'options', options: [ { label: 'Fixed', name: 'fixed', description: 'Specify a fixed description' }, { label: 'Dynamic', name: 'dynamic', description: 'Use LLM to generate a description' }",
    "outputs": "{ label: 'Proceed', name: 'proceed' }, { label: 'Reject', name: 'reject' }"
  },
  {
    "categoria": "agentflow",
    "label": "Iteration",
    "desc": "Execute the nodes within the iteration block through N iterations",
    "path": "Flowise/packages/components/nodes/agentflow/Iteration/Iteration.ts",
    "inputs": "{ label: 'Array Input', name: 'iterationInput', type: 'string', description: 'The input array to iterate over', acceptVariable: true, rows: 4 }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "LLM",
    "desc": "Large language models to analyze user-provided inputs and generate responses",
    "path": "Flowise/packages/components/nodes/agentflow/LLM/LLM.ts",
    "inputs": "{ label: 'Model', name: 'llmModel', type: 'asyncOptions', loadMethod: 'listModels', loadConfig: true }, { label: 'Messages', name: 'llmMessages', type: 'array', optional: true, acceptVariable: true, array: [ { label: 'Role', name: 'role', type: 'options', options: [ { label: 'System', name: 'system' }, { label: 'Assistant', name: 'assistant' }, { label: 'Developer', name: 'developer' }, { label: '",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Loop",
    "desc": "Loop back to a previous node",
    "path": "Flowise/packages/components/nodes/agentflow/Loop/Loop.ts",
    "inputs": "{ label: 'Loop Back To', name: 'loopBackToNode', type: 'asyncOptions', loadMethod: 'listPreviousNodes', freeSolo: true }, { label: 'Max Loop Count', name: 'maxLoopCount', type: 'number', default: 5 }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Retriever",
    "desc": "Retrieve information from vector database",
    "path": "Flowise/packages/components/nodes/agentflow/Retriever/Retriever.ts",
    "inputs": "{ label: 'Knowledge (Document Stores)', name: 'retrieverKnowledgeDocumentStores', type: 'array', description: 'Document stores to retrieve information from. Document stores must be upserted in advance.', array: [ { label: 'Document Store', name: 'documentStore', type: 'asyncOptions', loadMethod: 'listStores' }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Start",
    "desc": "Starting point of the agentflow",
    "path": "Flowise/packages/components/nodes/agentflow/Start/Start.ts",
    "inputs": "{ label: 'Input Type', name: 'startInputType', type: 'options', options: [ { label: 'Chat Input', name: 'chatInput', description: 'Start the conversation with chat input' }, { label: 'Form Input', name: 'formInput', description: 'Start the workflow with form inputs' }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Sticky Note",
    "desc": "Add notes to the agent flow",
    "path": "Flowise/packages/components/nodes/agentflow/StickyNote/StickyNote.ts",
    "inputs": "{ label: '', name: 'note', type: 'string', rows: 1, placeholder: 'Type something here', optional: true }",
    "outputs": ""
  },
  {
    "categoria": "agentflow",
    "label": "Tool",
    "desc": "Tools allow LLM to interact with external systems",
    "path": "Flowise/packages/components/nodes/agentflow/Tool/Tool.ts",
    "inputs": "{ label: 'Tool', name: 'toolAgentflowSelectedTool', type: 'asyncOptions', loadMethod: 'listTools', loadConfig: true }, { label: 'Tool Input Arguments', name: 'toolInputArgs', type: 'array', acceptVariable: true, refresh: true, array: [ { label: 'Input Argument Name', name: 'inputArgName', type: 'asyncOptions', loadMethod: 'listToolInputArgs', refresh: true }, { label: 'Input Argument Value', name:",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "Airtable Agent",
    "desc": "Agent used to answer queries on Airtable table",
    "path": "Flowise/packages/components/nodes/agents/AirtableAgent/AirtableAgent.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Base Id', name: 'baseId', type: 'string', placeholder: 'app11RobdGoX0YNsC', description: 'If your table URL looks like: https://airtable.com/app11RobdGoX0YNsC/tblJdmvbrgizbYICO/viw9UrP77Id0CE4ee, app11RovdGoX0YNsC is the base id' }, { label: 'Table Id', name: 'tableId', type: 'string', placeholder: 'tblJdmvbrgizbYICO'",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "Anthropic Agent",
    "desc": "",
    "path": "Flowise/packages/components/nodes/agents/LlamaIndexAgents/AnthropicAgent/AnthropicAgent_LlamaIndex.ts",
    "inputs": "{ label: 'Tools', name: 'tools', type: 'Tool_LlamaIndex', list: true }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'Anthropic Claude Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'System Message', name: 'systemMessage', type: 'string', rows: 4, optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "AutoGPT",
    "desc": "Autonomous agent with chain of thoughts for self-guided task completion",
    "path": "Flowise/packages/components/nodes/agents/AutoGPT/AutoGPT.ts",
    "inputs": "{ label: 'Allowed Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Vector Store Retriever', name: 'vectorStoreRetriever', type: 'BaseRetriever' }, { label: 'AutoGPT Name', name: 'aiName', type: 'string', placeholder: 'Tom', optional: true }, { label: 'AutoGPT Role', name: 'aiRole', type: 'string', placeholder: 'Assistant', ",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "BabyAGI",
    "desc": "Task Driven Autonomous Agent which creates new task and reprioritizes task list based on objective",
    "path": "Flowise/packages/components/nodes/agents/BabyAGI/BabyAGI.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Task Loop', name: 'taskLoop', type: 'number', default: 3 }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "Conversational Agent",
    "desc": "Conversational agent for a chat model. It will utilize chat specific prompts",
    "path": "Flowise/packages/components/nodes/agents/ConversationalAgent/ConversationalAgent.ts",
    "inputs": "{ label: 'Allowed Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'System Message', name: 'systemMessage', type: 'string', rows: 4, default: DEFAULT_PREFIX, optional: true, additionalParams: true }, { label: 'Input Moderation', description: 'Detect text that could",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "Conversational Retrieval Tool Agent",
    "desc": "Only compatible with models that are capable of function calling. ChatOpenAI, ChatMistral, ChatAnthropic, ChatVertexAI",
    "path": "Flowise/packages/components/nodes/agents/ConversationalRetrievalToolAgent/ConversationalRetrievalToolAgent.ts",
    "inputs": "{ label: 'Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'Tool Calling Chat Model', name: 'model', type: 'BaseChatModel', description: 'Only compatible with models that are capable of function calling. ChatOpenAI, ChatMistral, ChatAnthropic, ChatVertexAI' }, { label: 'System Message', name: 'systemMessage', type: 'string', d",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "CSV Agent",
    "desc": "Agent used to answer queries on CSV data",
    "path": "Flowise/packages/components/nodes/agents/CSVAgent/CSVAgent.ts",
    "inputs": "{ label: 'Csv File', name: 'csvFile', type: 'file', fileType: '.csv' }, { label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'System Message', name: 'systemMessagePrompt', type: 'string', rows: 4, additionalParams: true, optional: true, placeholder: 'I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". You will provide me wit",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "OpenAI Assistant",
    "desc": "Detect text that could generate harmful output and prevent it from being sent to the language model",
    "path": "Flowise/packages/components/nodes/agents/OpenAIAssistant/OpenAIAssistant.ts",
    "inputs": "{ label: 'Select Assistant', name: 'selectedAssistant', type: 'asyncOptions', loadMethod: 'listAssistants' }, { label: 'Allowed Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional: true, list: true }, {",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "OpenAI Tool Agent",
    "desc": "",
    "path": "Flowise/packages/components/nodes/agents/LlamaIndexAgents/OpenAIToolAgent/OpenAIToolAgent_LlamaIndex.ts",
    "inputs": "{ label: 'Tools', name: 'tools', type: 'Tool_LlamaIndex', list: true }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'OpenAI/Azure Chat Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'System Message', name: 'systemMessage', type: 'string', rows: 4, optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "ReAct Agent for Chat Models",
    "desc": "Agent that uses the ReAct logic to decide what action to take, optimized to be used with Chat Models",
    "path": "Flowise/packages/components/nodes/agents/ReActAgentChat/ReActAgentChat.ts",
    "inputs": "{ label: 'Allowed Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional: true, l",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "ReAct Agent for LLMs",
    "desc": "Agent that uses the ReAct logic to decide what action to take, optimized to be used with LLMs",
    "path": "Flowise/packages/components/nodes/agents/ReActAgentLLM/ReActAgentLLM.ts",
    "inputs": "{ label: 'Allowed Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional: true, list: true }, { label: 'Max Iterations', name: 'maxIte",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "Tool Agent",
    "desc": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat",
    "path": "Flowise/packages/components/nodes/agents/ToolAgent/ToolAgent.ts",
    "inputs": "{ label: 'Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'Tool Calling Chat Model', name: 'model', type: 'BaseChatModel', description: 'Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat' }, { label: 'Chat Prompt Template', ",
    "outputs": ""
  },
  {
    "categoria": "agents",
    "label": "XML Agent",
    "desc": "Detect text that could generate harmful output and prevent it from being sent to the language model",
    "path": "Flowise/packages/components/nodes/agents/XMLAgent/XMLAgent.ts",
    "inputs": "{ label: 'Tools', name: 'tools', type: 'Tool', list: true }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'System Message', name: 'systemMessage', type: 'string', warning: 'Prompt must include input variables: {tools}, {chat_history}, {input} and {agent_scratchpad}', rows: 4, default: defaultSystemMessage, addi",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "Arize",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/Arize/Arize.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "LangFuse",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/LangFuse/LangFuse.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "LangSmith",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/LangSmith/LangSmith.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "LangWatch",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/LangWatch/LangWatch.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "Lunary",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/Lunary/Lunary.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "Opik",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/Opik/Opik.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "analytic",
    "label": "Phoenix",
    "desc": "",
    "path": "Flowise/packages/components/nodes/analytic/Phoenix/Phoenix.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "Google GenAI Context Cache",
    "desc": "Large context cache for Google Gemini large language models",
    "path": "Flowise/packages/components/nodes/cache/GoogleGenerativeAIContextCache/GoogleGenerativeAIContextCache.ts",
    "inputs": "{ label: 'TTL', name: 'ttl', type: 'number', default: 60 * 60 * 24 * 30 }",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "InMemory Cache",
    "desc": "Cache LLM response in memory, will be cleared once app restarted",
    "path": "Flowise/packages/components/nodes/cache/InMemoryCache/InMemoryCache.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "InMemory Embedding Cache",
    "desc": "Cache generated Embeddings in memory to avoid needing to recompute them.",
    "path": "Flowise/packages/components/nodes/cache/InMemoryCache/InMemoryEmbeddingCache.ts",
    "inputs": "{ label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Namespace', name: 'namespace', type: 'string', optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "Momento Cache",
    "desc": "Cache LLM response using Momento, a distributed, serverless cache",
    "path": "Flowise/packages/components/nodes/cache/MomentoCache/MomentoCache.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "Redis Cache",
    "desc": "Cache LLM response in Redis, useful for sharing cache across multiple processes or servers",
    "path": "Flowise/packages/components/nodes/cache/RedisCache/RedisCache.ts",
    "inputs": "{ label: 'Time to Live (ms)', name: 'ttl', type: 'number', step: 1, optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "Redis Embeddings Cache",
    "desc": "Cache generated Embeddings in Redis to avoid needing to recompute them.",
    "path": "Flowise/packages/components/nodes/cache/RedisCache/RedisEmbeddingsCache.ts",
    "inputs": "{ label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Time to Live (ms)', name: 'ttl', type: 'number', step: 10, default: 60 * 60, optional: true, additionalParams: true }, { label: 'Namespace', name: 'namespace', type: 'string', optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "cache",
    "label": "Upstash Redis Cache",
    "desc": "Cache LLM response in Upstash Redis, serverless data for Redis and Kafka",
    "path": "Flowise/packages/components/nodes/cache/UpstashRedisCache/UpstashRedisCache.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Conversation Chain",
    "desc": "Chat models specific conversational chain with memory",
    "path": "Flowise/packages/components/nodes/chains/ConversationChain/ConversationChain.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Memory', name: 'memory', type: 'BaseMemory' }, { label: 'Chat Prompt Template', name: 'chatPromptTemplate', type: 'ChatPromptTemplate', description: 'Override existing prompt with Chat Prompt Template. Human Message must includes {input} variable', optional: true }, /* Deprecated { label: 'Document', name: 'document', type: '",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Conversational Retrieval QA Chain",
    "desc": "Document QA - built on RetrievalQAChain to provide a chat history component",
    "path": "Flowise/packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Vector Store Retriever', name: 'vectorStoreRetriever', type: 'BaseRetriever' }, { label: 'Memory', name: 'memory', type: 'BaseMemory', optional: true, description: 'If left empty, a default BufferMemory will be used' }, { label: 'Return Source Documents', name: 'returnSourceDocuments', type: 'boolean', optional: true }, { lab",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "GET API Chain",
    "desc": "Chain to run queries against GET API",
    "path": "Flowise/packages/components/nodes/chains/ApiChain/GETApiChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'API Documentation', name: 'apiDocs', type: 'string', description: 'Description of how API works. Please refer to more <a target=\"_blank\" href=\"https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/chains/api/open_meteo_docs.py\">examples</a>', rows: 4 }, { label: 'Headers', name: 'headers', typ",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Graph Cypher QA Chain",
    "desc": "Advanced chain for question-answering against a Neo4j graph by generating Cypher statements",
    "path": "Flowise/packages/components/nodes/chains/GraphCypherQAChain/GraphCypherQAChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel', description: 'Model for generating Cypher queries and answers.' }, { label: 'Neo4j Graph', name: 'graph', type: 'Neo4j' }, { label: 'Cypher Generation Prompt', name: 'cypherPrompt', optional: true, type: 'BasePromptTemplate', description: 'Prompt template for generating Cypher queries. Must include {schema} and {question} variabl",
    "outputs": "{ label: 'Graph Cypher QA Chain', name: 'graphCypherQAChain', baseClasses: [this.type, ...getBaseClasses(GraphCypherQAChain)"
  },
  {
    "categoria": "chains",
    "label": "LLM Chain",
    "desc": "Chain to run queries against LLMs",
    "path": "Flowise/packages/components/nodes/chains/LLMChain/LLMChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Prompt', name: 'prompt', type: 'BasePromptTemplate' }, { label: 'Output Parser', name: 'outputParser', type: 'BaseLLMOutputParser', optional: true }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration',",
    "outputs": "{ label: 'LLM Chain', name: 'llmChain', baseClasses: [this.type, ...getBaseClasses(LLMChain)"
  },
  {
    "categoria": "chains",
    "label": "Multi Prompt Chain",
    "desc": "Chain automatically picks an appropriate prompt from multiple prompt templates",
    "path": "Flowise/packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Prompt Retriever', name: 'promptRetriever', type: 'PromptRetriever', list: true }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional: true, list: true }",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Multi Retrieval QA Chain",
    "desc": "QA Chain that automatically picks an appropriate vector store from multiple retrievers",
    "path": "Flowise/packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Vector Store Retriever', name: 'vectorStoreRetriever', type: 'VectorStoreRetriever', list: true }, { label: 'Return Source Documents', name: 'returnSourceDocuments', type: 'boolean', optional: true }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being se",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "OpenAPI Chain",
    "desc": "Chain that automatically select and call APIs based only on an OpenAPI spec",
    "path": "Flowise/packages/components/nodes/chains/ApiChain/OpenAPIChain.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'YAML Link', name: 'yamlLink', type: 'string', placeholder: 'https://api.speak.com/openapi.yaml', description: 'If YAML link is provided, uploaded YAML File will be ignored and YAML link will be used instead' }, { label: 'YAML File', name: 'yamlFile', type: 'file', fileType: '.yaml', description: 'If YAML link is provided, upl",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "POST API Chain",
    "desc": "Chain to run queries against POST API",
    "path": "Flowise/packages/components/nodes/chains/ApiChain/POSTApiChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'API Documentation', name: 'apiDocs', type: 'string', description: 'Description of how API works. Please refer to more <a target=\"_blank\" href=\"https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/chains/api/open_meteo_docs.py\">examples</a>', rows: 4 }, { label: 'Headers', name: 'headers', typ",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Retrieval QA Chain",
    "desc": "QA chain to answer a question based on the retrieved documents",
    "path": "Flowise/packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Vector Store Retriever', name: 'vectorStoreRetriever', type: 'BaseRetriever' }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional: true, list: true }",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Sql Database Chain",
    "desc": "Answer questions over a SQL database",
    "path": "Flowise/packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Database', name: 'database', type: 'options', options: [ { label: 'SQLite', name: 'sqlite' }, { label: 'PostgreSQL', name: 'postgres' }, { label: 'MSSQL', name: 'mssql' }, { label: 'MySQL', name: 'mysql' }",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "Vectara QA Chain",
    "desc": "QA chain for Vectara",
    "path": "Flowise/packages/components/nodes/chains/VectaraChain/VectaraChain.ts",
    "inputs": "{ label: 'Vectara Store', name: 'vectaraStore', type: 'VectorStore' }, { label: 'Summarizer Prompt Name', name: 'summarizerPromptName', description: 'Summarize the results fetched from Vectara. Read <a target=\"_blank\" href=\"https://docs.vectara.com/docs/learn/grounded-generation/select-a-summarizer\">more</a>', type: 'options', options: [ { label: 'vectara-summary-ext-v1.2.0 (gpt-3.5-turbo)', name:",
    "outputs": ""
  },
  {
    "categoria": "chains",
    "label": "VectorDB QA Chain",
    "desc": "QA chain for vector databases",
    "path": "Flowise/packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Input Moderation', description: 'Detect text that could generate harmful output and prevent it from being sent to the language model', name: 'inputModeration', type: 'Moderation', optional: true, list: true }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "AWS ChatBedrock",
    "desc": "Wrapper around AWS Bedrock large language models that use the Converse API",
    "path": "Flowise/packages/components/nodes/chatmodels/AWSBedrock/AWSChatBedrock.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'Model Name', name: 'model', type: 'asyncOptions', loadMethod: 'listModels', default: 'anthropic.claude-3-haiku-20240307-v1:0' }, { label: 'Custom Model Name', name: 'customModel', description: 'If provided, will ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "Azure ChatOpenAI",
    "desc": "Wrapper around Azure OpenAI large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/AzureChatOpenAI/AzureChatOpenAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Streaming', nam",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "AzureChatOpenAI",
    "desc": "Wrapper around Azure OpenAI Chat LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/AzureChatOpenAI/AzureChatOpenAI_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'gpt-3.5-turbo-16k' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Top Probability', name: 'topP', type: 'number', step: 0",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "Chat Nemo Guardrails",
    "desc": "Access models through the Nemo Guardrails API",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatNemoGuardrails/ChatNemoGuardrails.ts",
    "inputs": "{ label: 'Configuration ID', name: 'configurationId', type: 'string', optional: false }, { label: 'Base URL', name: 'baseUrl', type: 'string', optional: false }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "Chat NVIDIA NIM",
    "desc": "Wrapper around NVIDIA NIM Inference API",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatNvdiaNIM/ChatNvdiaNIM.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'microsoft/phi-3-mini-4k-instruct' }, { label: 'Base Path', name: 'basePath', type: 'string', description: 'Specify the URL of the deployed NIM Inference API', placeholder: 'https://integrate.api.nvidia.com/v1' }, { label: 'Temperature', name: 'temperature', ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatAlibabaTongyi",
    "desc": "Wrapper around Alibaba Tongyi Chat Endpoints",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatAlibabaTongyi/ChatAlibabaTongyi.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelName', type: 'string', placeholder: 'qwen-plus' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatAnthropic",
    "desc": "Wrapper around ChatAnthropic large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatAnthropic/ChatAnthropic.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'claude-3-haiku' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatAnthropic",
    "desc": "Wrapper around ChatAnthropic LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatAnthropic/ChatAnthropic_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'claude-3-haiku' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokensToSample', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Top P', name: 'topP', type: 'number', step: 0.1, o",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatBaiduWenxin",
    "desc": "Wrapper around BaiduWenxin Chat Endpoints",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatBaiduWenxin/ChatBaiduWenxin.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelName', type: 'string', placeholder: 'ERNIE-Bot-turbo' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatCerebras",
    "desc": "Wrapper around Cerebras Inference API",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatCerebras/ChatCerebras.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'llama3.1-8b' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: true }, { label: 'Max Tokens', ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatCohere",
    "desc": "Wrapper around Cohere Chat Endpoints",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatCohere/ChatCohere.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'command-r' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.7, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatDeepseek",
    "desc": "Wrapper around Deepseek large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/Deepseek/Deepseek.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'deepseek-chat' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.7, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: t",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatFireworks",
    "desc": "Wrapper around Fireworks Chat Endpoints",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatFireworks/ChatFireworks.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelName', type: 'string', default: 'accounts/fireworks/models/llama-v3p1-8b-instruct', placeholder: 'accounts/fireworks/models/llama-v3p1-8b-instruct' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatGoogleGenerativeAI",
    "desc": "Wrapper around Google Gemini large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatGoogleGenerativeAI/ChatGoogleGenerativeAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'gemini-1.5-flash-latest' }, { label: 'Custom Model Name', name: 'customModelName', type: 'string', placeholder: 'gemini-1.5-pro-exp-0801', description: 'Custom model name to use. If provided, it will override the model selected', ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatGoogleVertexAI",
    "desc": "Wrapper around VertexAI large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatGoogleVertexAI/ChatGoogleVertexAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Region', description: 'Region to use for the model.', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels' }, { label: 'Custom Model Name', name: 'customModelName', type: 'string', placeholder: 'gemini",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatGroq",
    "desc": "Wrapper around Groq LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/Groq/ChatGroq_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', placeholder: 'llama3-70b-8192' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatHuggingFace",
    "desc": "Wrapper around HuggingFace large language models",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatHuggingFace/ChatHuggingFace.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'model', type: 'string', description: 'If using own inference endpoint, leave this blank', placeholder: 'gpt2' }, { label: 'Endpoint', name: 'endpoint', type: 'string', placeholder: 'https://xyz.eu-west-1.aws.endpoints.huggingface.cloud/gpt2', description: 'Using your own inference endpoint', optional: tr",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatIBMWatsonx",
    "desc": "Wrapper around IBM watsonx.ai foundation models",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatIBMWatsonx/ChatIBMWatsonx.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelName', type: 'string', placeholder: 'mistralai/mistral-large' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: true }, { label: 'Max To",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatLitellm",
    "desc": "Connect to a Litellm server using OpenAI-compatible API",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatLitellm/ChatLitellm.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Base URL', name: 'basePath', type: 'string', placeholder: 'http://localhost:8000' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'model_name' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', typ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatLocalAI",
    "desc": "Use local LLMs like llama.cpp, gpt4all using LocalAI",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatLocalAI/ChatLocalAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Base Path', name: 'basePath', type: 'string', placeholder: 'http://localhost:8080/v1' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'gpt4all-lora-quantized.bin' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', na",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatMistral",
    "desc": "Wrapper around ChatMistral LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatMistral/ChatMistral_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'mistral-tiny' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokensToSample', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Top P', name: 'topP', type: 'number', step: 0.1, opt",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatMistralAI",
    "desc": "Wrapper around Mistral large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatMistral/ChatMistral.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'mistral-tiny' }, { label: 'Temperature', name: 'temperature', type: 'number', description: 'What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatOllama",
    "desc": "Chat completion using open-source LLM on Ollama",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatOllama/ChatOllama.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Base URL', name: 'baseUrl', type: 'string', default: 'http://localhost:11434' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'llama2' }, { label: 'Temperature', name: 'temperature', type: 'number', description: 'The temperature of the model. Increasing the temperature will make the model answ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatOllama",
    "desc": "Wrapper around ChatOllama LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatOllama/ChatOllama_LlamaIndex.ts",
    "inputs": "{ label: 'Base URL', name: 'baseUrl', type: 'string', default: 'http://localhost:11434' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'llama3' }, { label: 'Temperature', name: 'temperature', type: 'number', description: 'The temperature of the model. Increasing the temperature will make the model answer more creatively. (Default: 0.8). Refer to <a target=\"_blank\" href=\"",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatOpenAI",
    "desc": "Wrapper around OpenAI large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatOpenAI/ChatOpenAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'gpt-4o-mini' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: tru",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatOpenAI",
    "desc": "Wrapper around OpenAI Chat LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatOpenAI/ChatOpenAI_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'gpt-3.5-turbo' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Top Probability', name: 'topP', type: 'number', step: 0.1, ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatOpenAI Custom",
    "desc": "Custom/FineTuned model using OpenAI Chat compatible API",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatOpenAICustom/ChatOpenAICustom.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'ft:gpt-3.5-turbo:my-org:custom_suffix:id' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: tr",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatOpenRouter",
    "desc": "Wrapper around Open Router Inference API",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatOpenRouter/ChatOpenRouter.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'openai/gpt-3.5-turbo' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: true }, { label: 'Max ",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatPerplexity",
    "desc": "Wrapper around Perplexity large language models that use the Chat endpoint",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatPerplexity/ChatPerplexity.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'model', type: 'asyncOptions', loadMethod: 'listModels', default: 'sonar' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 1, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Top",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatSambanova",
    "desc": "Wrapper around Sambanova Chat Endpoints",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatSambanova/ChatSambanova.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelName', type: 'string', default: 'Meta-Llama-3.3-70B-Instruct', placeholder: 'Meta-Llama-3.3-70B-Instruct' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatTogetherAI",
    "desc": "Wrapper around TogetherAI large language models",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatTogetherAI/ChatTogetherAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'mixtral-8x7b-32768', description: 'Refer to <a target=\"_blank\" href=\"https://docs.together.ai/docs/inference-models\">models</a> page' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streami",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatTogetherAI",
    "desc": "Wrapper around ChatTogetherAI LLM specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatTogetherAI/ChatTogether_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'mixtral-8x7b-32768', description: 'Refer to <a target=\"_blank\" href=\"https://docs.together.ai/docs/inference-models\">models</a> page' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "ChatXAI",
    "desc": "Wrapper around Grok from XAI",
    "path": "Flowise/packages/components/nodes/chatmodels/ChatXAI/ChatXAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelName', type: 'string', placeholder: 'grok-beta' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Streaming', name: 'streaming', type: 'boolean', default: true, optional: true, additionalParams: true }, { label: 'Max Tokens', name: '",
    "outputs": ""
  },
  {
    "categoria": "chatmodels",
    "label": "GroqChat",
    "desc": "Wrapper around Groq API with LPU Inference Engine",
    "path": "Flowise/packages/components/nodes/chatmodels/Groq/Groq.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', placeholder: 'llama3-70b-8192' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: t",
    "outputs": ""
  },
  {
    "categoria": "documentloaders",
    "label": "Airtable",
    "desc": "If your table URL looks like: https://airtable.com/app11RobdGoX0YNsC/tblJdmvbrgizbYICO/viw9UrP77Id0CE4ee, app11RovdGoX0YNsC is the base id",
    "path": "Flowise/packages/components/nodes/documentloaders/Airtable/Airtable.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Base Id', name: 'baseId', type: 'string', placeholder: 'app11RobdGoX0YNsC', description: 'If your table URL looks like: https://airtable.com/app11RobdGoX0YNsC/tblJdmvbrgizbYICO/viw9UrP77Id0CE4ee, app11RovdGoX0YNsC is the base id' }, { label: 'Table Id', name: 'tableId', type: 'string', placeholder: 't",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "API Loader",
    "desc": "Please upload a SSL certificate file in either .pem or .crt",
    "path": "Flowise/packages/components/nodes/documentloaders/API/APILoader.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Method', name: 'method', type: 'options', options: [ { label: 'GET', name: 'GET' }, { label: 'POST', name: 'POST' }",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Apify Website Content Crawler",
    "desc": "Load data from Apify Website Content Crawler",
    "path": "Flowise/packages/components/nodes/documentloaders/ApifyWebsiteContentCrawler/ApifyWebsiteContentCrawler.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Start URLs', name: 'urls', type: 'string', description: 'One or more URLs of pages where the crawler will start, separated by commas.', placeholder: 'https://js.langchain.com/docs/' }, { label: 'Crawler type', type: 'options', name: 'crawlerType', options: [ { label: 'Headless web browser (Chrome+Play",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "BraveSearch API Document Loader",
    "desc": "Load and process data from BraveSearch results",
    "path": "Flowise/packages/components/nodes/documentloaders/BraveSearchAPI/BraveSearchAPI.ts",
    "inputs": "{ label: 'Query', name: 'query', type: 'string' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true }, { label: 'Omit Metadata Keys', name: 'omitMetadataKeys', type: 'string', rows: 4",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Cheerio Web Scraper",
    "desc": "Select a method to retrieve relative links",
    "path": "Flowise/packages/components/nodes/documentloaders/Cheerio/Cheerio.ts",
    "inputs": "{ label: 'URL', name: 'url', type: 'string' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Get Relative Links Method', name: 'relativeLinksMethod', type: 'options', description: 'Select a method to retrieve relative links', options: [ { label: 'Web Crawl', name: 'webCrawl', description: 'Crawl relative links from HTML URL' }, { label: 'Scrape X",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Confluence",
    "desc": "Refer to <a target=",
    "path": "Flowise/packages/components/nodes/documentloaders/Confluence/Confluence.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Base URL', name: 'baseUrl', type: 'string', placeholder: 'https://example.atlassian.net/wiki' }, { label: 'Space Key', name: 'spaceKey', type: 'string', placeholder: '~EXAMPLE362906de5d343d49dcdbae5dEXAMPLE', description: 'Refer to <a target=\"_blank\" href=\"https://community.atlassian.com/t5/Confluence",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Csv File",
    "desc": "Extracting a single column",
    "path": "Flowise/packages/components/nodes/documentloaders/Csv/Csv.ts",
    "inputs": "{ label: 'Csv File', name: 'csvFile', type: 'file', fileType: '.csv' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Single Column Extraction', name: 'columnName', type: 'string', description: 'Extracting a single column', placeholder: 'Enter column name', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', descript",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Custom Document Loader",
    "desc": "Input variables can be used in the function with prefix $. For example: $var",
    "path": "Flowise/packages/components/nodes/documentloaders/CustomDocumentLoader/CustomDocumentLoader.ts",
    "inputs": "{ label: 'Input Variables', name: 'functionInputVariables', description: 'Input variables can be used in the function with prefix $. For example: $var', type: 'json', optional: true, acceptVariable: true, list: true }, { label: 'Javascript Function', name: 'javascriptFunction', type: 'code', description: `Must return an array of document objects containing metadata and pageContent if \"Document\" is",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Document Store",
    "desc": "Array of document objects containing metadata and pageContent",
    "path": "Flowise/packages/components/nodes/documentloaders/DocumentStore/DocStoreLoader.ts",
    "inputs": "{ label: 'Select Store', name: 'selectedStore', type: 'asyncOptions', loadMethod: 'listStores' }",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Docx File",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/Docx/Docx.ts",
    "inputs": "{ label: 'Docx File', name: 'docxFile', type: 'file', fileType: '.docx' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true }, { label: 'Omit Metadata Keys', name: 'omitMetadataKeys',",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Epub File",
    "desc": "Load data from EPUB files",
    "path": "Flowise/packages/components/nodes/documentloaders/Epub/Epub.ts",
    "inputs": "{ label: 'Epub File', name: 'epubFile', type: 'file', fileType: '.epub' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Usage', name: 'usage', type: 'options', options: [ { label: 'One document per chapter', name: 'perChapter' }, { label: 'One document per file', name: 'perFile' }",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Figma",
    "desc": "Load data from a Figma file",
    "path": "Flowise/packages/components/nodes/documentloaders/Figma/Figma.ts",
    "inputs": "{ label: 'File Key', name: 'fileKey', type: 'string', placeholder: 'key', description: 'The file key can be read from any Figma file URL: https://www.figma.com/file/:key/:title. For example, in https://www.figma.com/file/12345/Website, the file key is 12345' }, { label: 'Node IDs', name: 'nodeIds', type: 'string', placeholder: '0, 1, 2', description: 'A list of Node IDs, seperated by comma. Refer ",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "File Loader",
    "desc": "Only when loading PDF files",
    "path": "Flowise/packages/components/nodes/documentloaders/File/File.ts",
    "inputs": "{ label: 'File', name: 'file', type: 'file', fileType: '*' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Pdf Usage', name: 'usage', type: 'options', description: 'Only when loading PDF files', options: [ { label: 'One document per page', name: 'perPage' }, { label: 'One document per file', name: 'perFile' }",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "FireCrawl",
    "desc": "Load data from URL using FireCrawl",
    "path": "Flowise/packages/components/nodes/documentloaders/FireCrawl/FireCrawl.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Type', type: 'options', name: 'crawlerType', options: [ { label: 'Crawl', name: 'crawl', description: 'Crawl a URL and all accessible subpages' }, { label: 'Scrape', name: 'scrape', description: 'Scrape a URL and get its content' }, { label: 'Extract', name: 'extract', description: 'Extract data from ",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Folder with Files",
    "desc": "Only when loading PDF files",
    "path": "Flowise/packages/components/nodes/documentloaders/Folder/Folder.ts",
    "inputs": "{ label: 'Folder Path', name: 'folderPath', type: 'string', placeholder: '' }, { label: 'Recursive', name: 'recursive', type: 'boolean', additionalParams: false }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Pdf Usage', name: 'pdfUsage', type: 'options', description: 'Only when loading PDF files', options: [ { label: 'One document per page', na",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "GitBook",
    "desc": "If want to load all paths from the GitBook provide only root path e.g.https://docs.gitbook.com/",
    "path": "Flowise/packages/components/nodes/documentloaders/Gitbook/Gitbook.ts",
    "inputs": "{ label: 'Web Path', name: 'webPath', type: 'string', placeholder: 'https://docs.gitbook.com/product-tour/navigation', description: 'If want to load all paths from the GitBook provide only root path e.g.https://docs.gitbook.com/ ' }, { label: 'Should Load All Paths', name: 'shouldLoadAllPaths', type: 'boolean', description: 'Load from all paths in a given GitBook', optional: true }, { label: 'Text",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Github",
    "desc": "Only needed when accessing private repo",
    "path": "Flowise/packages/components/nodes/documentloaders/Github/Github.ts",
    "inputs": "{ label: 'Repo Link', name: 'repoLink', type: 'string', placeholder: 'https://github.com/FlowiseAI/Flowise' }, { label: 'Branch', name: 'branch', type: 'string', default: 'main' }, { label: 'Recursive', name: 'recursive', type: 'boolean', optional: true }, { label: 'Max Concurrency', name: 'maxConcurrency', type: 'number', step: 1, optional: true, additionalParams: true }, { label: 'Github Base UR",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Google Drive",
    "desc": "Google Drive OAuth2 Credential",
    "path": "Flowise/packages/components/nodes/documentloaders/GoogleDrive/GoogleDrive.ts",
    "inputs": "{ label: 'Select Files', name: 'selectedFiles', type: 'asyncMultiOptions', loadMethod: 'listFiles', description: 'Select files from your Google Drive', refresh: true, optional: true }, { label: 'Folder ID', name: 'folderId', type: 'string', description: 'Google Drive folder ID to load all files from (alternative to selecting specific files)', placeholder: '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2u",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Google Sheets",
    "desc": "Google Sheets OAuth2 Credential",
    "path": "Flowise/packages/components/nodes/documentloaders/GoogleSheets/GoogleSheets.ts",
    "inputs": "{ label: 'Select Spreadsheet', name: 'spreadsheetIds', type: 'asyncMultiOptions', loadMethod: 'listSpreadsheets', description: 'Select spreadsheet from your Google Drive', refresh: true }, { label: 'Sheet Names', name: 'sheetNames', type: 'string', description: 'Comma-separated list of sheet names to load. If empty, loads all sheets.', placeholder: 'Sheet1, Sheet2', optional: true }, { label: 'Ran",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Jira",
    "desc": "Jira API Credential",
    "path": "Flowise/packages/components/nodes/documentloaders/Jira/Jira.ts",
    "inputs": "{ label: 'Host', name: 'host', type: 'string', placeholder: 'https://jira.example.com' }, { label: 'Project Key', name: 'projectKey', type: 'string', default: 'main' }, { label: 'Limit per request', name: 'limitPerRequest', type: 'number', step: 1, optional: true, placeholder: '100' }, { label: 'Created after', name: 'createdAfter', type: 'string', optional: true, placeholder: '2024-01-01' }, { la",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Json File",
    "desc": "Ex: {",
    "path": "Flowise/packages/components/nodes/documentloaders/Json/Json.ts",
    "inputs": "{ label: 'Json File', name: 'jsonFile', type: 'file', fileType: '.json' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Pointers Extraction (separated by commas)', name: 'pointersName', type: 'string', description: 'Ex: { \"key\": \"value\" }, Pointer Extraction = \"key\", \"value\" will be extracted as pageContent of the chunk. Use comma to separate mu",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Json Lines File",
    "desc": "Ex: {",
    "path": "Flowise/packages/components/nodes/documentloaders/Jsonlines/Jsonlines.ts",
    "inputs": "{ label: 'Jsonlines File', name: 'jsonlinesFile', type: 'file', fileType: '.jsonl' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Pointer Extraction', name: 'pointerName', type: 'string', placeholder: 'key', description: 'Ex: { \"key\": \"value\" }, Pointer Extraction = \"key\", \"value\" will be extracted as pageContent of the chunk', optional: false ",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Microsoft Excel",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/MicrosoftExcel/MicrosoftExcel.ts",
    "inputs": "{ label: 'Excel File', name: 'excelFile', type: 'file', fileType: '.xlsx, .xls, .xlsm, .xlsb' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true }, { label: 'Omit Metadata Keys', nam",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Microsoft PowerPoint",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/MicrosoftPowerpoint/MicrosoftPowerpoint.ts",
    "inputs": "{ label: 'PowerPoint File', name: 'powerpointFile', type: 'file', fileType: '.pptx, .ppt' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true }, { label: 'Omit Metadata Keys', name: '",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Microsoft Word",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/MicrosoftWord/MicrosoftWord.ts",
    "inputs": "{ label: 'Word File', name: 'docxFile', type: 'file', fileType: '.docx, .doc' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true }, { label: 'Omit Metadata Keys', name: 'omitMetadata",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Notion Database",
    "desc": "Load data from Notion Database (each row is a separate document with all properties as metadata)",
    "path": "Flowise/packages/components/nodes/documentloaders/Notion/NotionDB.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Notion Database Id', name: 'databaseId', type: 'string', description: 'If your URL looks like - https://www.notion.so/abcdefh?v=long_hash_2, then abcdefh is the database ID' }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracte",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Notion Folder",
    "desc": "Load data from the exported and unzipped Notion folder",
    "path": "Flowise/packages/components/nodes/documentloaders/Notion/NotionFolder.ts",
    "inputs": "{ label: 'Notion Folder', name: 'notionFolder', type: 'string', description: 'Get folder path', placeholder: 'Paste folder path' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true },",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Notion Page",
    "desc": "Load data from Notion Page (including child pages all as separate documents)",
    "path": "Flowise/packages/components/nodes/documentloaders/Notion/NotionPage.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Notion Page Id', name: 'pageId', type: 'string', description: 'The last The 32 char hex in the url path. For example: https://www.notion.so/skarard/LangChain-Notion-API-b34ca03f219c4420a6046fc4bdfdf7b4, b34ca03f219c4420a6046fc4bdfdf7b4 is the Page ID' }, { label: 'Additional Metadata', name: 'metadata",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Oxylabs",
    "desc": "Extract data from URLs using Oxylabs",
    "path": "Flowise/packages/components/nodes/documentloaders/Oxylabs/Oxylabs.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: false }, { label: 'Query', name: 'query', type: 'string', description: 'Website URL of query keyword.' }, { label: 'Source', name: 'source', type: 'options', description: 'Target website to scrape.', options: [ { label: 'Universal', name: 'universal' }, { label: 'Google Search', name: 'google_search' }, { label: 'Amazo",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Pdf File",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/Pdf/Pdf.ts",
    "inputs": "{ label: 'Pdf File', name: 'pdfFile', type: 'file', fileType: '.pdf' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Usage', name: 'usage', type: 'options', options: [ { label: 'One document per page', name: 'perPage' }, { label: 'One document per file', name: 'perFile' }",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Plain Text",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/PlainText/PlainText.ts",
    "inputs": "{ label: 'Text', name: 'text', type: 'string', rows: 4, placeholder: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua...' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Playwright Web Scraper",
    "desc": "Select a method to retrieve relative links",
    "path": "Flowise/packages/components/nodes/documentloaders/Playwright/Playwright.ts",
    "inputs": "{ label: 'URL', name: 'url', type: 'string' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Get Relative Links Method', name: 'relativeLinksMethod', type: 'options', description: 'Select a method to retrieve relative links', options: [ { label: 'Web Crawl', name: 'webCrawl', description: 'Crawl relative links from HTML URL' }, { label: 'Scrape X",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Puppeteer Web Scraper",
    "desc": "Select a method to retrieve relative links",
    "path": "Flowise/packages/components/nodes/documentloaders/Puppeteer/Puppeteer.ts",
    "inputs": "{ label: 'URL', name: 'url', type: 'string' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Get Relative Links Method', name: 'relativeLinksMethod', type: 'options', description: 'Select a method to retrieve relative links', options: [ { label: 'Web Crawl', name: 'webCrawl', description: 'Crawl relative links from HTML URL' }, { label: 'Scrape X",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "S3",
    "desc": "Load Data from S3 Buckets",
    "path": "Flowise/packages/components/nodes/documentloaders/S3File/S3File.ts",
    "inputs": "{ label: 'Bucket', name: 'bucketName', type: 'string' }, { label: 'Object Key', name: 'keyName', type: 'string', description: 'The object key (or key name) that uniquely identifies object in an Amazon S3 bucket', placeholder: 'AI-Paper.pdf' }, { label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'File Processing Method', name: 'filePr",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "S3 Directory",
    "desc": "Load Data from S3 Buckets",
    "path": "Flowise/packages/components/nodes/documentloaders/S3Directory/S3Directory.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Bucket', name: 'bucketName', type: 'string' }, { label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'Server URL', name: 'serverUrl', description: 'The fully qualified endpoint of the webservice. This is only for using a custom endpoint (f",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "SearchApi For Web Search",
    "desc": "Load data from real-time search results",
    "path": "Flowise/packages/components/nodes/documentloaders/SearchApi/SearchAPI.ts",
    "inputs": "{ label: 'Query', name: 'query', type: 'string', optional: true }, { label: 'Custom Parameters', name: 'customParameters', type: 'json', optional: true, additionalParams: true }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted docume",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "SerpApi For Web Search",
    "desc": "Load and process data from web search results",
    "path": "Flowise/packages/components/nodes/documentloaders/SerpApi/SerpAPI.ts",
    "inputs": "{ label: 'Query', name: 'query', type: 'string' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name: 'metadata', type: 'json', description: 'Additional metadata to be added to the extracted documents', optional: true, additionalParams: true }, { label: 'Omit Metadata Keys', name: 'omitMetadataKeys', type: 'string', rows: 4",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Spider Document Loaders",
    "desc": "Scrape & Crawl the web with Spider",
    "path": "Flowise/packages/components/nodes/documentloaders/Spider/Spider.ts",
    "inputs": "{ label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Mode', name: 'mode', type: 'options', options: [ { label: 'Scrape', name: 'scrape', description: 'Scrape a single page' }, { label: 'Crawl', name: 'crawl', description: 'Crawl a website and extract pages within the same domain' }",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Text File",
    "desc": "Additional metadata to be added to the extracted documents",
    "path": "Flowise/packages/components/nodes/documentloaders/Text/Text.ts",
    "inputs": "{ label: 'Txt File', name: 'txtFile', type: 'file', fileType: '.txt, .html, .aspx, .asp, .cpp, .c, .cs, .css, .go, .h, .java, .js, .less, .ts, .php, .proto, .python, .py, .rst, .ruby, .rb, .rs, .scala, .sc, .scss, .sol, .sql, .swift, .markdown, .md, .tex, .ltx, .vb, .xml' }, { label: 'Text Splitter', name: 'textSplitter', type: 'TextSplitter', optional: true }, { label: 'Additional Metadata', name",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Unstructured File Loader",
    "desc": "Use Unstructured.io to load data from a file path",
    "path": "Flowise/packages/components/nodes/documentloaders/Unstructured/UnstructuredFile.ts",
    "inputs": "/** Deprecated { label: 'File Path', name: 'filePath', type: 'string', placeholder: '', optional: true, warning: 'Use the File Upload instead of File path. If file is uploaded, this path is ignored. Path will be deprecated in future releases.' }, */ { label: 'Files Upload', name: 'fileObject', type: 'file', description: 'Files to be processed. Multiple files can be uploaded.', fileType: '.txt, .te",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "Unstructured Folder Loader",
    "desc": "Use Unstructured.io to load data from a folder. Note: Currently doesn",
    "path": "Flowise/packages/components/nodes/documentloaders/Unstructured/UnstructuredFolder.ts",
    "inputs": "{ label: 'Folder Path', name: 'folderPath', type: 'string', placeholder: '' }, { label: 'Unstructured API URL', name: 'unstructuredAPIUrl', description: 'Unstructured API URL. Read <a target=\"_blank\" href=\"https://unstructured-io.github.io/unstructured/introduction.html#getting-started\">more</a> on how to get started', type: 'string', placeholder: process.env.UNSTRUCTURED_API_URL || 'http://localh",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "documentloaders",
    "label": "VectorStore To Document",
    "desc": "Search documents with scores from vector store",
    "path": "Flowise/packages/components/nodes/documentloaders/VectorStoreToDocument/VectorStoreToDocument.ts",
    "inputs": "{ label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from vector database. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Minimum Score (%)', name: 'minScore', type: 'number', optional: true, placeholder: '75', step: 1, description: 'Minumum s",
    "outputs": "{ label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: [...this.baseClasses, 'json'"
  },
  {
    "categoria": "embeddings",
    "label": "AWS Bedrock Embeddings",
    "desc": "AWSBedrock embedding models to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/AWSBedrockEmbedding/AWSBedrockEmbedding.ts",
    "inputs": "{ label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'Model Name', name: 'model', type: 'asyncOptions', loadMethod: 'listModels', default: 'amazon.titan-embed-text-v1' }, { label: 'Custom Model Name', name: 'customModel', description: 'If provided, will override model selected from Model Name option', type: 'string', optional: true },",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "Azure OpenAI Embeddings",
    "desc": "Azure OpenAI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/AzureOpenAIEmbedding/AzureOpenAIEmbedding.ts",
    "inputs": "{ label: 'Batch Size', name: 'batchSize', type: 'number', default: '100', optional: true, additionalParams: true }, { label: 'Timeout', name: 'timeout', type: 'number', optional: true, additionalParams: true }, { label: 'BasePath', name: 'basepath', type: 'string', optional: true, additionalParams: true }, { label: 'BaseOptions', name: 'baseOptions', type: 'json', optional: true, additionalParams:",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "Azure OpenAI Embeddings",
    "desc": "Azure OpenAI API embeddings specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/embeddings/AzureOpenAIEmbedding/AzureOpenAIEmbedding_LlamaIndex.ts",
    "inputs": "{ label: 'Timeout', name: 'timeout', type: 'number', optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "Cohere Embeddings",
    "desc": "Cohere API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/CohereEmbedding/CohereEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'embed-english-v2.0' }, { label: 'Type', name: 'inputType', type: 'options', description: 'Specifies the type of input passed to the model. Required for embedding models v3 and higher. <a target=\"_blank\" href=\"https://docs.cohere.com/reference/embed\">Official Docs</a>', options: [ { label: 'search_do",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "GoogleGenerativeAI Embeddings",
    "desc": "Google Generative API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/GoogleGenerativeAIEmbedding/GoogleGenerativeAIEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'embedding-001' }, { label: 'Task Type', name: 'tasktype', type: 'options', description: 'Type of task for which the embedding will be used', options: [ { label: 'TASK_TYPE_UNSPECIFIED', name: 'TASK_TYPE_UNSPECIFIED' }, { label: 'RETRIEVAL_QUERY', name: 'RETRIEVAL_QUERY' }, { label: 'RETRIEVAL_DOCUME",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "GoogleVertexAI Embeddings",
    "desc": "Google vertexAI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/GoogleVertexAIEmbedding/GoogleVertexAIEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'text-embedding-004' }, { label: 'Region', description: 'Region to use for the model.', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', optional: true }, { label: 'Strip New Lines', name: 'stripNewLines', type: 'boolean', optional: true, additionalParams: true, description: 'Remove n",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "HuggingFace Inference Embeddings",
    "desc": "HuggingFace Inference API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/HuggingFaceInferenceEmbedding/HuggingFaceInferenceEmbedding.ts",
    "inputs": "{ label: 'Model', name: 'modelName', type: 'string', description: 'If using own inference endpoint, leave this blank', placeholder: 'sentence-transformers/distilbert-base-nli-mean-tokens', optional: true }, { label: 'Endpoint', name: 'endpoint', type: 'string', placeholder: 'https://xyz.eu-west-1.aws.endpoints.huggingface.cloud/sentence-transformers/all-MiniLM-L6-v2', description: 'Using your own ",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "IBM Watsonx Embeddings",
    "desc": "Generate embeddings for a given text using open source model on IBM Watsonx",
    "path": "Flowise/packages/components/nodes/embeddings/IBMWatsonxEmbedding/IBMWatsonxEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'string', default: 'ibm/slate-30m-english-rtrvr' }, { label: 'Truncate Input Tokens', name: 'truncateInputTokens', type: 'number', description: 'Truncate the input tokens.', step: 1, optional: true, additionalParams: true }, { label: 'Max Retries', name: 'maxRetries', type: 'number', description: 'The maximum number of retries.', step: 1, optional: t",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "Jina Embeddings",
    "desc": "JinaAI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/JinaAIEmbedding/JinaAIEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'string', default: 'jina-embeddings-v3', description: 'Refer to <a href=\"https://jina.ai/embeddings/\" target=\"_blank\">JinaAI documentation</a> for available models' }, { label: 'Dimensions', name: 'modelDimensions', type: 'number', default: 1024, description: 'Refer to <a href=\"https://jina.ai/embeddings/\" target=\"_blank\">JinaAI documentation</a> for",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "LocalAI Embeddings",
    "desc": "Use local embeddings models like llama.cpp",
    "path": "Flowise/packages/components/nodes/embeddings/LocalAIEmbedding/LocalAIEmbedding.ts",
    "inputs": "{ label: 'Base Path', name: 'basePath', type: 'string', placeholder: 'http://localhost:8080/v1' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'text-embedding-ada-002' }",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "MistralAI Embeddings",
    "desc": "MistralAI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/MistralEmbedding/MistralEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'mistral-embed' }, { label: 'Batch Size', name: 'batchSize', type: 'number', step: 1, default: 512, optional: true, additionalParams: true }, { label: 'Strip New Lines', name: 'stripNewLines', type: 'boolean', default: true, optional: true, additionalParams: true }, { label: 'Override Endpoint', name",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "Ollama Embeddings",
    "desc": "Generate embeddings for a given text using open source model on Ollama",
    "path": "Flowise/packages/components/nodes/embeddings/OllamaEmbedding/OllamaEmbedding.ts",
    "inputs": "{ label: 'Base URL', name: 'baseUrl', type: 'string', default: 'http://localhost:11434' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'llama2' }, { label: 'Number of GPU', name: 'numGpu', type: 'number', description: 'The number of layers to send to the GPU(s). On macOS it defaults to 1 to enable metal support, 0 to disable. Refer to <a target=\"_blank\" href=\"https://git",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "OpenAI Embedding",
    "desc": "OpenAI Embedding specific for LlamaIndex",
    "path": "Flowise/packages/components/nodes/embeddings/OpenAIEmbedding/OpenAIEmbedding_LlamaIndex.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'text-embedding-ada-002' }, { label: 'Timeout', name: 'timeout', type: 'number', optional: true, additionalParams: true }, { label: 'BasePath', name: 'basepath', type: 'string', optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "OpenAI Embeddings",
    "desc": "OpenAI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/OpenAIEmbedding/OpenAIEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'text-embedding-ada-002' }, { label: 'Strip New Lines', name: 'stripNewLines', type: 'boolean', optional: true, additionalParams: true }, { label: 'Batch Size', name: 'batchSize', type: 'number', optional: true, additionalParams: true }, { label: 'Timeout', name: 'timeout', type: 'number', optional: ",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "OpenAI Embeddings Custom",
    "desc": "OpenAI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/OpenAIEmbeddingCustom/OpenAIEmbeddingCustom.ts",
    "inputs": "{ label: 'Strip New Lines', name: 'stripNewLines', type: 'boolean', optional: true, additionalParams: true }, { label: 'Batch Size', name: 'batchSize', type: 'number', optional: true, additionalParams: true }, { label: 'Timeout', name: 'timeout', type: 'number', optional: true, additionalParams: true }, { label: 'BasePath', name: 'basepath', type: 'string', optional: true, additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "TogetherAIEmbedding",
    "desc": "TogetherAI Embedding models to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/TogetherAIEmbedding/TogetherAIEmbedding.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'sentence-transformers/msmarco-bert-base-dot-v5', description: 'Refer to <a target=\"_blank\" href=\"https://docs.together.ai/docs/embedding-models\">embedding models</a> page' }",
    "outputs": ""
  },
  {
    "categoria": "embeddings",
    "label": "VoyageAI Embeddings",
    "desc": "Voyage AI API to generate embeddings for a given text",
    "path": "Flowise/packages/components/nodes/embeddings/VoyageAIEmbedding/VoyageAIEmbedding.ts",
    "inputs": "{ label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'voyage-2' }",
    "outputs": ""
  },
  {
    "categoria": "engine",
    "label": "Context Chat Engine",
    "desc": "Answer question based on retrieved documents (context) with built-in memory to remember conversation",
    "path": "Flowise/packages/components/nodes/engine/ChatEngine/ContextChatEngine.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'Vector Store Retriever', name: 'vectorStoreRetriever', type: 'VectorIndexRetriever' }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'Return Source Documents', name: 'returnSourceDocuments', type: 'boolean', optional: true }, { label: 'System Message', name: 'systemMessagePrompt', type: 'str",
    "outputs": ""
  },
  {
    "categoria": "engine",
    "label": "Query Engine",
    "desc": "Simple query engine built to answer question over your data, without memory",
    "path": "Flowise/packages/components/nodes/engine/QueryEngine/QueryEngine.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'vectorStoreRetriever', type: 'VectorIndexRetriever' }, { label: 'Response Synthesizer', name: 'responseSynthesizer', type: 'ResponseSynthesizer', description: 'ResponseSynthesizer is responsible for sending the query, nodes, and prompt templates to the LLM to generate a response. See <a target=\"_blank\" href=\"https://ts.llamaindex.ai/modules/response_synthe",
    "outputs": ""
  },
  {
    "categoria": "engine",
    "label": "Simple Chat Engine",
    "desc": "Simple engine to handle back and forth conversations",
    "path": "Flowise/packages/components/nodes/engine/ChatEngine/SimpleChatEngine.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'Memory', name: 'memory', type: 'BaseChatMemory' }, { label: 'System Message', name: 'systemMessagePrompt', type: 'string', rows: 4, optional: true, placeholder: 'You are a helpful assistant' }",
    "outputs": ""
  },
  {
    "categoria": "engine",
    "label": "Sub Question Query Engine",
    "desc": "Breaks complex query into sub questions for each relevant data source, then gather all the intermediate reponses and synthesizes a final response",
    "path": "Flowise/packages/components/nodes/engine/SubQuestionQueryEngine/SubQuestionQueryEngine.ts",
    "inputs": "{ label: 'QueryEngine Tools', name: 'queryEngineTools', type: 'QueryEngineTool', list: true }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'Embeddings', name: 'embeddings', type: 'BaseEmbedding_LlamaIndex' }, { label: 'Response Synthesizer', name: 'responseSynthesizer', type: 'ResponseSynthesizer', description: 'ResponseSynthesizer is responsible for sending ",
    "outputs": ""
  },
  {
    "categoria": "graphs",
    "label": "Neo4j",
    "desc": "Connect with Neo4j graph database",
    "path": "Flowise/packages/components/nodes/graphs/Neo4j/Neo4j.ts",
    "inputs": "{ label: 'Database', name: 'database', type: 'string', placeholder: 'neo4j', optional: true }, { label: 'Timeout (ms)', name: 'timeoutMs', type: 'number', default: 5000, optional: true }, { label: 'Enhanced Schema', name: 'enhancedSchema', type: 'boolean', default: false, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "AWS Bedrock",
    "desc": "Wrapper around AWS Bedrock large language models",
    "path": "Flowise/packages/components/nodes/llms/AWSBedrock/AWSBedrock.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'Model Name', name: 'model', type: 'asyncOptions', loadMethod: 'listModels' }, { label: 'Custom Model Name', name: 'customModel', description: 'If provided, will override model selected from Model Name option', ty",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "Azure OpenAI",
    "desc": "Wrapper around Azure OpenAI large language models",
    "path": "Flowise/packages/components/nodes/llms/Azure OpenAI/AzureOpenAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'text-davinci-003' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.9, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams: true",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "Cohere",
    "desc": "Wrapper around Cohere large language models",
    "path": "Flowise/packages/components/nodes/llms/Cohere/Cohere.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'command' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.7, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "Fireworks",
    "desc": "Wrapper around Fireworks API for large language models",
    "path": "Flowise/packages/components/nodes/llms/Fireworks/Fireworks.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', default: 'accounts/fireworks/models/llama-v3-70b-instruct-hf', description: 'For more details see https://fireworks.ai/models', optional: true }",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "GoogleVertexAI",
    "desc": "Wrapper around GoogleVertexAI large language models",
    "path": "Flowise/packages/components/nodes/llms/GoogleVertexAI/GoogleVertexAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'text-bison' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.7, optional: true }, { label: 'max Output Tokens', name: 'maxOutputTokens', type: 'number', step: 1, optional: true, additionalParam",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "HuggingFace Inference",
    "desc": "Wrapper around HuggingFace large language models",
    "path": "Flowise/packages/components/nodes/llms/HuggingFaceInference/HuggingFaceInference.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'model', type: 'string', description: 'If using own inference endpoint, leave this blank', placeholder: 'gpt2', optional: true }, { label: 'Endpoint', name: 'endpoint', type: 'string', placeholder: 'https://xyz.eu-west-1.aws.endpoints.huggingface.cloud/gpt2', description: 'Using your own inference endpoin",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "IBMWatsonx",
    "desc": "Wrapper around IBM watsonx.ai foundation models",
    "path": "Flowise/packages/components/nodes/llms/IBMWatsonx/IBMWatsonx.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'modelId', type: 'string', default: 'ibm/granite-13b-instruct-v2', description: 'The name of the model to query.' }, { label: 'Decoding Method', name: 'decodingMethod', type: 'options', options: [ { label: 'sample', name: 'sample' }, { label: 'greedy', name: 'greedy' }",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "Ollama",
    "desc": "Wrapper around open source large language models on Ollama",
    "path": "Flowise/packages/components/nodes/llms/Ollama/Ollama.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Base URL', name: 'baseUrl', type: 'string', default: 'http://localhost:11434' }, { label: 'Model Name', name: 'modelName', type: 'string', placeholder: 'llama2' }, { label: 'Temperature', name: 'temperature', type: 'number', description: 'The temperature of the model. Increasing the temperature will make the model answ",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "OpenAI",
    "desc": "Wrapper around OpenAI large language models",
    "path": "Flowise/packages/components/nodes/llms/OpenAI/OpenAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'asyncOptions', loadMethod: 'listModels', default: 'gpt-3.5-turbo-instruct' }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, default: 0.7, optional: true }, { label: 'Max Tokens', name: 'maxTokens', type: 'number', step: 1, optional: true, additionalParams",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "Replicate",
    "desc": "Use Replicate to run open source models on cloud",
    "path": "Flowise/packages/components/nodes/llms/Replicate/Replicate.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model', name: 'model', type: 'string', placeholder: 'a16z-infra/llama13b-v2-chat:df7690f1994d94e96ad9d568eac121aecf50684a0b0963b25a41cc40061269e5', optional: true }, { label: 'Temperature', name: 'temperature', type: 'number', step: 0.1, description: 'Adjusts randomness of outputs, greater than 1 is random and 0 is det",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "Sambanova",
    "desc": "Wrapper around Sambanova API for large language models",
    "path": "Flowise/packages/components/nodes/llms/SambaNova/Sambanova.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', default: 'Meta-Llama-3.3-70B-Instruct', description: 'For more details see https://docs.sambanova.ai/cloud/docs/get-started/supported-models', optional: true }",
    "outputs": ""
  },
  {
    "categoria": "llms",
    "label": "TogetherAI",
    "desc": "Wrapper around TogetherAI large language models",
    "path": "Flowise/packages/components/nodes/llms/TogetherAI/TogetherAI.ts",
    "inputs": "{ label: 'Cache', name: 'cache', type: 'BaseCache', optional: true }, { label: 'Model Name', name: 'modelName', type: 'string', description: 'The name of the model to query.' }, { label: 'Top K', name: 'topK', type: 'number', description: 'The topK parameter is used to limit the number of choices for the next predicted word or token. It specifies the maximum number of tokens to consider at each st",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Agent Memory",
    "desc": "Memory for agentflow to remember the state of the conversation",
    "path": "Flowise/packages/components/nodes/memory/AgentMemory/AgentMemory.ts",
    "inputs": "{ label: 'Database', name: 'databaseType', type: 'options', options: [ { label: 'SQLite', name: 'sqlite' }, { label: 'PostgreSQL', name: 'postgres' }, { label: 'MySQL', name: 'mysql' }",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Buffer Memory",
    "desc": "Retrieve chat messages stored in database",
    "path": "Flowise/packages/components/nodes/memory/BufferMemory/BufferMemory.ts",
    "inputs": "{ label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory#ui-and-embedded-chat\">more</a>', default: '', additionalParams: true, optional: true }, { label: 'Memory Key', name: 'memoryKey', type: 'string', default: 'chat_history', additionalParams: true }",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Buffer Window Memory",
    "desc": "Uses a window of size k to surface the last k back-and-forth to use as memory",
    "path": "Flowise/packages/components/nodes/memory/BufferWindowMemory/BufferWindowMemory.ts",
    "inputs": "{ label: 'Size', name: 'k', type: 'number', default: '4', description: 'Window of size k to surface the last k back-and-forth to use as memory.' }, { label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory#ui-and-embedded-chat\">more</a>', default: '', optional: true, additiona",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Conversation Summary Buffer Memory",
    "desc": "Uses token length to decide when to summarize conversations",
    "path": "Flowise/packages/components/nodes/memory/ConversationSummaryBufferMemory/ConversationSummaryBufferMemory.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Max Token Limit', name: 'maxTokenLimit', type: 'number', default: 2000, description: 'Summarize conversations once token limit is reached. Default to 2000' }, { label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowisea",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Conversation Summary Memory",
    "desc": "Summarizes the conversation and stores the current summary in memory",
    "path": "Flowise/packages/components/nodes/memory/ConversationSummaryMemory/ConversationSummaryMemory.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory#ui-and-embedded-chat\">more</a>', default: '', optional: true, additionalParams: true }, { label: 'Memory Key', name: 'memoryKey', type: 'string', default: '",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "DynamoDB Chat Memory",
    "desc": "Stores the conversation in dynamo db table",
    "path": "Flowise/packages/components/nodes/memory/DynamoDb/DynamoDb.ts",
    "inputs": "{ label: 'Table Name', name: 'tableName', type: 'string' }, { label: 'Partition Key', name: 'partitionKey', type: 'string' }, { label: 'Region', name: 'region', type: 'string', description: 'The aws region in which table is located', placeholder: 'us-east-1' }, { label: 'Session ID', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blan",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Mem0",
    "desc": "Stores and manages chat memory using Mem0 service",
    "path": "Flowise/packages/components/nodes/memory/Mem0/Mem0.ts",
    "inputs": "{ label: 'User ID', name: 'user_id', type: 'string', description: 'Unique identifier for the user. Required only if \"Use Flowise Chat ID\" is OFF.', default: 'flowise-default-user', optional: true }, // Added toggle to use Flowise chat ID { label: 'Use Flowise Chat ID', name: 'useFlowiseChatId', type: 'boolean', description: 'Use the Flowise internal Chat ID as the Mem0 User ID, overriding the \"Use",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "MongoDB Atlas Chat Memory",
    "desc": "Stores the conversation in MongoDB Atlas",
    "path": "Flowise/packages/components/nodes/memory/MongoDBMemory/MongoDBMemory.ts",
    "inputs": "{ label: 'Database', name: 'databaseName', placeholder: '<DB_NAME>', type: 'string' }, { label: 'Collection Name', name: 'collectionName', placeholder: '<COLLECTION_NAME>', type: 'string' }, { label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory/long-term-memory#ui-and-embe",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "MySQL Agent Memory",
    "desc": "Memory for agentflow to remember the state of the conversation using MySQL database",
    "path": "Flowise/packages/components/nodes/memory/AgentMemory/MySQLAgentMemory/MySQLAgentMemory.ts",
    "inputs": "{ label: 'Host', name: 'host', type: 'string' }, { label: 'Database', name: 'database', type: 'string' }, { label: 'Port', name: 'port', type: 'number', default: '3306' }, { label: 'Additional Connection Configuration', name: 'additionalConfig', type: 'json', additionalParams: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Postgres Agent Memory",
    "desc": "Memory for agentflow to remember the state of the conversation using Postgres database",
    "path": "Flowise/packages/components/nodes/memory/AgentMemory/PostgresAgentMemory/PostgresAgentMemory.ts",
    "inputs": "{ label: 'Host', name: 'host', type: 'string' }, { label: 'Database', name: 'database', type: 'string' }, { label: 'Port', name: 'port', type: 'number', default: '5432' }, { label: 'Additional Connection Configuration', name: 'additionalConfig', type: 'json', additionalParams: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Redis-Backed Chat Memory",
    "desc": "Summarizes the conversation and stores the memory in Redis server",
    "path": "Flowise/packages/components/nodes/memory/RedisBackedChatMemory/RedisBackedChatMemory.ts",
    "inputs": "{ label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory/long-term-memory#ui-and-embedded-chat\">more</a>', default: '', additionalParams: true, optional: true }, { label: 'Session Timeouts', name: 'sessionTTL', type: 'number', description: 'Seconds till a session expires. If ",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "SQLite Agent Memory",
    "desc": "Memory for agentflow to remember the state of the conversation using SQLite database",
    "path": "Flowise/packages/components/nodes/memory/AgentMemory/SQLiteAgentMemory/SQLiteAgentMemory.ts",
    "inputs": "/*{ label: 'Database File Path', name: 'databaseFilePath', type: 'string', placeholder: 'C:\\\\Users\\\\User\\\\.flowise\\\\database.sqlite', description: 'Path to the SQLite database file. Leave empty to use default application database', optional: true },*/ { label: 'Additional Connection Configuration', name: 'additionalConfig', type: 'json', additionalParams: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Upstash Redis-Backed Chat Memory",
    "desc": "Summarizes the conversation and stores the memory in Upstash Redis server",
    "path": "Flowise/packages/components/nodes/memory/UpstashRedisBackedChatMemory/UpstashRedisBackedChatMemory.ts",
    "inputs": "{ label: 'Upstash Redis REST URL', name: 'baseURL', type: 'string', placeholder: 'https://<your-url>.upstash.io' }, { label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory/long-term-memory#ui-and-embedded-chat\">more</a>', default: '', additionalParams: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Zep Memory - Cloud",
    "desc": "Summarizes the conversation and stores the memory in zep server",
    "path": "Flowise/packages/components/nodes/memory/ZepMemoryCloud/ZepMemoryCloud.ts",
    "inputs": "{ label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory/long-term-memory#ui-and-embedded-chat\">more</a>', default: '', additionalParams: true, optional: true }, { label: 'Memory Type', name: 'memoryType', type: 'string', default: 'perpetual', description: 'Zep Memory Type, c",
    "outputs": ""
  },
  {
    "categoria": "memory",
    "label": "Zep Memory - Open Source",
    "desc": "Summarizes the conversation and stores the memory in zep server",
    "path": "Flowise/packages/components/nodes/memory/ZepMemory/ZepMemory.ts",
    "inputs": "{ label: 'Base URL', name: 'baseURL', type: 'string', default: 'http://127.0.0.1:8000' }, { label: 'Session Id', name: 'sessionId', type: 'string', description: 'If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory/long-term-memory#ui-and-embedded-chat\">more</a>', default: '', additionalParams: true, optional: true }, { label: 'Size', name: '",
    "outputs": ""
  },
  {
    "categoria": "moderation",
    "label": "OpenAI Moderation",
    "desc": "Check whether content complies with OpenAI usage policies.",
    "path": "Flowise/packages/components/nodes/moderation/OpenAIModeration/OpenAIModeration.ts",
    "inputs": "{ label: 'Error Message', name: 'moderationErrorMessage', type: 'string', rows: 2, default: \"Cannot Process! Input violates OpenAI's content moderation policies.\", optional: true }",
    "outputs": ""
  },
  {
    "categoria": "moderation",
    "label": "Simple Prompt Moderation",
    "desc": "Check whether input consists of any text from Deny list, and prevent being sent to LLM",
    "path": "Flowise/packages/components/nodes/moderation/SimplePromptModeration/SimplePromptModeration.ts",
    "inputs": "{ label: 'Deny List', name: 'denyList', type: 'string', rows: 4, placeholder: `ignore previous instructions\\ndo not follow the directions\\nyou must ignore all previous instructions`, description: 'An array of string literals (enter one per line) that should not appear in the prompt text.' }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel', description: 'Use LLM to detect if the input i",
    "outputs": ""
  },
  {
    "categoria": "multiagents",
    "label": "Supervisor",
    "desc": "Prompt must contains {team_members}",
    "path": "Flowise/packages/components/nodes/multiagents/Supervisor/Supervisor.ts",
    "inputs": "{ label: 'Supervisor Name', name: 'supervisorName', type: 'string', placeholder: 'Supervisor', default: 'Supervisor' }, { label: 'Supervisor Prompt', name: 'supervisorPrompt', type: 'string', description: 'Prompt must contains {team_members}', rows: 4, default: sysPrompt, additionalParams: true }, { label: 'Tool Calling Chat Model', name: 'model', type: 'BaseChatModel', description: `Only compatib",
    "outputs": ""
  },
  {
    "categoria": "multiagents",
    "label": "Worker",
    "desc": "",
    "path": "Flowise/packages/components/nodes/multiagents/Worker/Worker.ts",
    "inputs": "{ label: 'Worker Name', name: 'workerName', type: 'string', placeholder: 'Worker' }, { label: 'Worker Prompt', name: 'workerPrompt', type: 'string', rows: 4, default: examplePrompt }, { label: 'Tools', name: 'tools', type: 'Tool', list: true, optional: true }, { label: 'Supervisor', name: 'supervisor', type: 'Supervisor' }, { label: 'Tool Calling Chat Model', name: 'model', type: 'BaseChatModel', ",
    "outputs": ""
  },
  {
    "categoria": "outputparsers",
    "label": "Advanced Structured Output Parser",
    "desc": "Parse the output of an LLM call into a given structure by providing a Zod schema.",
    "path": "Flowise/packages/components/nodes/outputparsers/StructuredOutputParserAdvanced/StructuredOutputParserAdvanced.ts",
    "inputs": "{ label: 'Autofix', name: 'autofixParser', type: 'boolean', optional: true, description: 'In the event that the first call fails, will make another call to the model to fix any errors.' }, { label: 'Example JSON', name: 'exampleJson', type: 'string', description: 'Zod schema for the output of the model', rows: 10, default: `z.object({ title: z.string(), // Title of the movie as a string yearOfRele",
    "outputs": ""
  },
  {
    "categoria": "outputparsers",
    "label": "CSV Output Parser",
    "desc": "Parse the output of an LLM call as a comma-separated list of values",
    "path": "Flowise/packages/components/nodes/outputparsers/CSVListOutputParser/CSVListOutputParser.ts",
    "inputs": "{ label: 'Autofix', name: 'autofixParser', type: 'boolean', optional: true, description: 'In the event that the first call fails, will make another call to the model to fix any errors.' }",
    "outputs": ""
  },
  {
    "categoria": "outputparsers",
    "label": "Custom List Output Parser",
    "desc": "Parse the output of an LLM call as a list of values.",
    "path": "Flowise/packages/components/nodes/outputparsers/CustomListOutputParser/CustomListOutputParser.ts",
    "inputs": "{ label: 'Length', name: 'length', type: 'number', step: 1, description: 'Number of values to return', optional: true }, { label: 'Separator', name: 'separator', type: 'string', description: 'Separator between values', default: ',', optional: true }, { label: 'Autofix', name: 'autofixParser', type: 'boolean', optional: true, description: 'In the event that the first call fails, will make another c",
    "outputs": ""
  },
  {
    "categoria": "outputparsers",
    "label": "Structured Output Parser",
    "desc": "Parse the output of an LLM call into a given (JSON) structure.",
    "path": "Flowise/packages/components/nodes/outputparsers/StructuredOutputParser/StructuredOutputParser.ts",
    "inputs": "{ label: 'Autofix', name: 'autofixParser', type: 'boolean', optional: true, description: 'In the event that the first call fails, will make another call to the model to fix any errors.' }, { label: 'JSON Structure', name: 'jsonStructure', type: 'datagrid', description: 'JSON structure for LLM to return', datagrid: [ { field: 'property', headerName: 'Property', editable: true }, { field: 'type', he",
    "outputs": ""
  },
  {
    "categoria": "prompts",
    "label": "Chat Prompt Template",
    "desc": "Schema to represent a chat prompt",
    "path": "Flowise/packages/components/nodes/prompts/ChatPromptTemplate/ChatPromptTemplate.ts",
    "inputs": "{ label: 'System Message', name: 'systemMessagePrompt', type: 'string', rows: 4, placeholder: `You are a helpful assistant that translates {input_language} to {output_language}.` }, { label: 'Human Message', name: 'humanMessagePrompt', description: 'This prompt will be added at the end of the messages as human message', type: 'string', rows: 4, placeholder: `{text}` }, { label: 'Format Prompt Valu",
    "outputs": ""
  },
  {
    "categoria": "prompts",
    "label": "Few Shot Prompt Template",
    "desc": "Prompt template you can build with examples",
    "path": "Flowise/packages/components/nodes/prompts/FewShotPromptTemplate/FewShotPromptTemplate.ts",
    "inputs": "{ label: 'Examples', name: 'examples', type: 'string', rows: 4, placeholder: `[ { \"word\": \"happy\", \"antonym\": \"sad\" }, { \"word\": \"tall\", \"antonym\": \"short\" },",
    "outputs": ""
  },
  {
    "categoria": "prompts",
    "label": "LangFuse Prompt Template",
    "desc": "Fetch schema from LangFuse to represent a prompt for an LLM",
    "path": "Flowise/packages/components/nodes/prompts/PromptLangfuse/PromptLangfuse.ts",
    "inputs": "{ label: 'Prompt Name', name: 'template', type: 'string', placeholder: `Name of the template` }, { label: 'Format Prompt Values', name: 'promptValues', type: 'json', optional: true, acceptVariable: true, list: true }",
    "outputs": ""
  },
  {
    "categoria": "prompts",
    "label": "Prompt Template",
    "desc": "Schema to represent a basic prompt for an LLM",
    "path": "Flowise/packages/components/nodes/prompts/PromptTemplate/PromptTemplate.ts",
    "inputs": "{ label: 'Template', name: 'template', type: 'string', rows: 4, placeholder: `What is a good name for a company that makes {product}?` }, { label: 'Format Prompt Values', name: 'promptValues', type: 'json', optional: true, acceptVariable: true, list: true }",
    "outputs": ""
  },
  {
    "categoria": "recordmanager",
    "label": "MySQL Record Manager",
    "desc": "Use MySQL to keep track of document writes into the vector databases",
    "path": "Flowise/packages/components/nodes/recordmanager/MySQLRecordManager/MySQLrecordManager.ts",
    "inputs": "{ label: 'Host', name: 'host', type: 'string' }, { label: 'Database', name: 'database', type: 'string' }, { label: 'Port', name: 'port', type: 'number', placeholder: '3306', optional: true }, { label: 'Additional Connection Configuration', name: 'additionalConfig', type: 'json', additionalParams: true, optional: true }, { label: 'Table Name', name: 'tableName', type: 'string', placeholder: 'upsert",
    "outputs": ""
  },
  {
    "categoria": "recordmanager",
    "label": "Postgres Record Manager",
    "desc": "Use Postgres to keep track of document writes into the vector databases",
    "path": "Flowise/packages/components/nodes/recordmanager/PostgresRecordManager/PostgresRecordManager.ts",
    "inputs": "{ label: 'Host', name: 'host', type: 'string', placeholder: getHost(), optional: !!getHost() }, { label: 'Database', name: 'database', type: 'string', placeholder: getDatabase(), optional: !!getDatabase() }, { label: 'Port', name: 'port', type: 'number', placeholder: getPort(), optional: true }, { label: 'SSL', name: 'ssl', description: 'Use SSL to connect to Postgres', type: 'boolean', additional",
    "outputs": ""
  },
  {
    "categoria": "recordmanager",
    "label": "SQLite Record Manager",
    "desc": "Use SQLite to keep track of document writes into the vector databases",
    "path": "Flowise/packages/components/nodes/recordmanager/SQLiteRecordManager/SQLiteRecordManager.ts",
    "inputs": "/*{ label: 'Database File Path', name: 'databaseFilePath', type: 'string', placeholder: 'C:\\\\Users\\\\User\\\\.flowise\\\\database.sqlite' },*/ { label: 'Additional Connection Configuration', name: 'additionalConfig', type: 'json', additionalParams: true, optional: true }, { label: 'Table Name', name: 'tableName', type: 'string', placeholder: 'upsertion_records', additionalParams: true, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "responsesynthesizer",
    "label": "Compact and Refine",
    "desc": "CompactRefine is a slight variation of Refine that first compacts the text chunks into the smallest possible number of chunks.",
    "path": "Flowise/packages/components/nodes/responsesynthesizer/CompactRefine/CompactRefine.ts",
    "inputs": "{ label: 'Refine Prompt', name: 'refinePrompt', type: 'string', rows: 4, default: `The original query is as follows: {query} We have provided an existing answer: {existingAnswer} We have the opportunity to refine the existing answer (only if needed) with some more context below. ------------ {context} ------------ Given the new context, refine the original answer to better answer the query. If the",
    "outputs": ""
  },
  {
    "categoria": "responsesynthesizer",
    "label": "Refine",
    "desc": "Create and refine an answer by sequentially going through each retrieved text chunk. This makes a separate LLM call per Node. Good for more detailed answers.",
    "path": "Flowise/packages/components/nodes/responsesynthesizer/Refine/Refine.ts",
    "inputs": "{ label: 'Refine Prompt', name: 'refinePrompt', type: 'string', rows: 4, default: `The original query is as follows: {query} We have provided an existing answer: {existingAnswer} We have the opportunity to refine the existing answer (only if needed) with some more context below. ------------ {context} ------------ Given the new context, refine the original answer to better answer the query. If the",
    "outputs": ""
  },
  {
    "categoria": "responsesynthesizer",
    "label": "Simple Response Builder",
    "desc": "",
    "path": "Flowise/packages/components/nodes/responsesynthesizer/SimpleResponseBuilder/SimpleResponseBuilder.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "responsesynthesizer",
    "label": "TreeSummarize",
    "desc": "Given a set of text chunks and the query, recursively construct a tree and return the root node as the response. Good for summarization purposes.",
    "path": "Flowise/packages/components/nodes/responsesynthesizer/TreeSummarize/TreeSummarize.ts",
    "inputs": "{ label: 'Prompt', name: 'prompt', type: 'string', rows: 4, default: `Context information from multiple sources is below. --------------------- {context} --------------------- Given the information from multiple sources and not prior knowledge, answer the query. Query: {query} Answer:`, warning: `Prompt can contains no variables, or up to 2 variables. Variables must be {context} and {query}`, opti",
    "outputs": ""
  },
  {
    "categoria": "retrievers",
    "label": "AWS Bedrock Knowledge Base Retriever",
    "desc": "Connect to AWS Bedrock Knowledge Base API and retrieve relevant chunks",
    "path": "Flowise/packages/components/nodes/retrievers/AWSBedrockKBRetriever/AWSBedrockKBRetriever.ts",
    "inputs": "{ label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'Knowledge Base ID', name: 'knoledgeBaseID', type: 'string' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'TopK', name: 'to",
    "outputs": ""
  },
  {
    "categoria": "retrievers",
    "label": "Cohere Rerank Retriever",
    "desc": "Cohere Rerank indexes the documents from most to least semantically relevant to the query.",
    "path": "Flowise/packages/components/nodes/retrievers/CohereRerankRetriever/CohereRerankRetriever.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'baseRetriever', type: 'VectorStoreRetriever' }, { label: 'Model Name', name: 'model', type: 'options', options: [ { label: 'rerank-v3.5', name: 'rerank-v3.5' }, { label: 'rerank-english-v3.0', name: 'rerank-english-v3.0' }, { label: 'rerank-multilingual-v3.0', name: 'rerank-multilingual-v3.0' }",
    "outputs": "{ label: 'Cohere Rerank Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Custom Retriever",
    "desc": "Return results based on predefined format",
    "path": "Flowise/packages/components/nodes/retrievers/CustomRetriever/CustomRetriever.ts",
    "inputs": "{ label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Result Format', name: 'resultFormat', type: 'string', rows: 4, description: 'Format to return the results in. Use {{context}} t",
    "outputs": "{ label: 'Custom Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Embeddings Filter Retriever",
    "desc": "A document compressor that uses embeddings to drop documents unrelated to the query",
    "path": "Flowise/packages/components/nodes/retrievers/EmbeddingsFilterRetriever/EmbeddingsFilterRetriever.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'baseRetriever', type: 'VectorStoreRetriever' }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Similarity Threshold', name: 'similarityT",
    "outputs": "{ label: 'Embeddings Filter Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Extract Metadata Retriever",
    "desc": "Extract keywords/metadata from the query and use it to filter documents",
    "path": "Flowise/packages/components/nodes/retrievers/ExtractMetadataRetriever/ExtractMetadataRetriever.ts",
    "inputs": "{ label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Prompt', name: 'dynamicMetadataFilterRetrieverPrompt', type: 'st",
    "outputs": "{ label: 'Extract Metadata Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "HyDE Retriever",
    "desc": "Use HyDE retriever to retrieve from a vector store",
    "path": "Flowise/packages/components/nodes/retrievers/HydeRetriever/HydeRetriever.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Select Defined Prompt', name: 'promptKey', description: ",
    "outputs": "{ label: 'HyDE Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Jina AI Rerank Retriever",
    "desc": "Jina AI Rerank indexes the documents from most to least semantically relevant to the query.",
    "path": "Flowise/packages/components/nodes/retrievers/JinaRerankRetriever/JinaRerankRetriever.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'baseRetriever', type: 'VectorStoreRetriever' }, { label: 'Model Name', name: 'model', type: 'options', options: [ { label: 'jina-reranker-v2-base-multilingual', name: 'jina-reranker-v2-base-multilingual' }, { label: 'jina-colbert-v2', name: 'jina-colbert-v2' }",
    "outputs": "{ label: 'Jina AI Rerank Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "LLM Filter Retriever",
    "desc": "Iterate over the initially returned documents and extract, from each, only the content that is relevant to the query",
    "path": "Flowise/packages/components/nodes/retrievers/LLMFilterRetriever/LLMFilterCompressionRetriever.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'baseRetriever', type: 'VectorStoreRetriever' }, { label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }",
    "outputs": "{ label: 'LLM Filter Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Multi Query Retriever",
    "desc": "Generate multiple queries from different perspectives for a given user input query",
    "path": "Flowise/packages/components/nodes/retrievers/MultiQueryRetriever/MultiQueryRetriever.ts",
    "inputs": "{ label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Prompt', name: 'modelPrompt', description: 'Prompt for the language model to generate alternative questions. Use {question} to refer to the original question', type: 'string', rows: 4, default: defaultPrompt }",
    "outputs": ""
  },
  {
    "categoria": "retrievers",
    "label": "Prompt Retriever",
    "desc": "Store prompt template with name & description to be later queried by MultiPromptChain",
    "path": "Flowise/packages/components/nodes/retrievers/PromptRetriever/PromptRetriever.ts",
    "inputs": "{ label: 'Prompt Name', name: 'name', type: 'string', placeholder: 'physics-qa' }, { label: 'Prompt Description', name: 'description', type: 'string', rows: 3, description: 'Description of what the prompt does and when it should be used', placeholder: 'Good for answering questions about physics' }, { label: 'Prompt System Message', name: 'systemMessage', type: 'string', rows: 4, placeholder: `You ",
    "outputs": ""
  },
  {
    "categoria": "retrievers",
    "label": "Reciprocal Rank Fusion Retriever",
    "desc": "Reciprocal Rank Fusion to re-rank search results by multiple query generation.",
    "path": "Flowise/packages/components/nodes/retrievers/RRFRetriever/RRFRetriever.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'baseRetriever', type: 'VectorStoreRetriever' }, { label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Query Count', name: 'queryCount', d",
    "outputs": "{ label: 'Reciprocal Rank Fusion Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Similarity Score Threshold Retriever",
    "desc": "Return results based on the minimum similarity percentage",
    "path": "Flowise/packages/components/nodes/retrievers/SimilarityThresholdRetriever/SimilarityThresholdRetriever.ts",
    "inputs": "{ label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Query', name: 'query', type: 'string', description: 'Query to retrieve documents from retriever. If not specified, user question will be used', optional: true, acceptVariable: true }, { label: 'Minimum Similarity Score (%)', name: 'minSimilarityScore', description: 'Finds results with at least this similarity score', ty",
    "outputs": "{ label: 'Similarity Threshold Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "retrievers",
    "label": "Vector Store Retriever",
    "desc": "Store vector store as retriever to be later queried by MultiRetrievalQAChain",
    "path": "Flowise/packages/components/nodes/retrievers/VectorStoreRetriever/VectorStoreRetriever.ts",
    "inputs": "{ label: 'Vector Store', name: 'vectorStore', type: 'VectorStore' }, { label: 'Retriever Name', name: 'name', type: 'string', placeholder: 'netflix movies' }, { label: 'Retriever Description', name: 'description', type: 'string', rows: 3, description: 'Description of when to use the vector store retriever', placeholder: 'Good for answering questions about netflix movies' }",
    "outputs": ""
  },
  {
    "categoria": "retrievers",
    "label": "Voyage AI Rerank Retriever",
    "desc": "Voyage AI Rerank indexes the documents from most to least semantically relevant to the query.",
    "path": "Flowise/packages/components/nodes/retrievers/VoyageAIRetriever/VoyageAIRerankRetriever.ts",
    "inputs": "{ label: 'Vector Store Retriever', name: 'baseRetriever', type: 'VectorStoreRetriever' }, { label: 'Model Name', name: 'model', type: 'options', options: [ { label: 'rerank-lite-1', name: 'rerank-lite-1' }, { label: 'rerank-lite-2', name: 'rerank-lite-2' }, { label: 'rerank-1', name: 'rerank-1' }, { label: 'rerank-2', name: 'rerank-2' }",
    "outputs": "{ label: 'Voyage AI Rerank Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Document', name: 'document', description: 'Array of document objects containing metadata and pageContent', baseClasses: ['Document', 'json'"
  },
  {
    "categoria": "sequentialagents",
    "label": "Agent",
    "desc": "Agent that can execute tools",
    "path": "Flowise/packages/components/nodes/sequentialagents/Agent/Agent.ts",
    "inputs": "{ label: 'Agent Name', name: 'agentName', type: 'string', placeholder: 'Agent' }, { label: 'System Prompt', name: 'systemMessagePrompt', type: 'string', rows: 4, optional: true, default: examplePrompt }, { label: 'Prepend Messages History', name: 'messageHistory', description: 'Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examp",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "Condition",
    "desc": "Conditional function to determine which route to take next",
    "path": "Flowise/packages/components/nodes/sequentialagents/Condition/Condition.ts",
    "inputs": "{ label: 'Condition Name', name: 'conditionName', type: 'string', optional: true, placeholder: 'If X, then Y' }, { label: 'Sequential Node', name: 'sequentialNode', type: 'Start | Agent | LLMNode | ToolNode | CustomFunction | ExecuteFlow', description: 'Can be connected to one of the following nodes: Start, Agent, LLM Node, Tool Node, Custom Function, Execute Flow', list: true }, { label: 'Conditi",
    "outputs": "{ label: 'Next', name: 'next', baseClasses: ['Condition'"
  },
  {
    "categoria": "sequentialagents",
    "label": "Condition Agent",
    "desc": "Uses an agent to determine which route to take next",
    "path": "Flowise/packages/components/nodes/sequentialagents/ConditionAgent/ConditionAgent.ts",
    "inputs": "{ label: 'Name', name: 'conditionAgentName', type: 'string', placeholder: 'Condition Agent' }, { label: 'Sequential Node', name: 'sequentialNode', type: 'Start | Agent | LLMNode | ToolNode | CustomFunction | ExecuteFlow', description: 'Can be connected to one of the following nodes: Start, Agent, LLM Node, Tool Node, Custom Function, Execute Flow', list: true }, { label: 'Chat Model', name: 'model",
    "outputs": "{ label: 'Next', name: 'next', baseClasses: ['Condition'"
  },
  {
    "categoria": "sequentialagents",
    "label": "Custom JS Function",
    "desc": "Input variables can be used in the function with prefix $. For example: $var",
    "path": "Flowise/packages/components/nodes/sequentialagents/CustomFunction/CustomFunction.ts",
    "inputs": "{ label: 'Input Variables', name: 'functionInputVariables', description: 'Input variables can be used in the function with prefix $. For example: $var', type: 'json', optional: true, acceptVariable: true, list: true }, { label: 'Sequential Node', name: 'sequentialNode', type: 'Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow', description: 'Can be connected to one of t",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "End",
    "desc": "End conversation",
    "path": "Flowise/packages/components/nodes/sequentialagents/End/End.ts",
    "inputs": "{ label: 'Sequential Node', name: 'sequentialNode', type: 'Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow', description: 'Can be connected to one of the following nodes: Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow' }",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "Execute Flow",
    "desc": "Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow",
    "path": "Flowise/packages/components/nodes/sequentialagents/ExecuteFlow/ExecuteFlow.ts",
    "inputs": "{ label: 'Sequential Node', name: 'sequentialNode', type: 'Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow', description: 'Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow', list: true }, { label: 'Name', name: 'seqExecuteFlowName', type: 'string' }, { label: 'Select Flow', name: 'selectedFlow'",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "LLM Node",
    "desc": "Run Chat Model and return the output",
    "path": "Flowise/packages/components/nodes/sequentialagents/LLMNode/LLMNode.ts",
    "inputs": "{ label: 'Name', name: 'llmNodeName', type: 'string', placeholder: 'LLM' }, { label: 'System Prompt', name: 'systemMessagePrompt', type: 'string', rows: 4, optional: true, additionalParams: true }, { label: 'Prepend Messages History', name: 'messageHistory', description: 'Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples', ",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "Loop",
    "desc": "Loop back to the specific sequential node",
    "path": "Flowise/packages/components/nodes/sequentialagents/Loop/Loop.ts",
    "inputs": "{ label: 'Sequential Node', name: 'sequentialNode', type: 'Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow', description: 'Can be connected to one of the following nodes: Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow', list: true }, { label: 'Loop To', name: 'loopToName', description: 'Name of the agent/llm to loop back to', type: 'string', placeholder:",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "Start",
    "desc": "Starting point of the conversation",
    "path": "Flowise/packages/components/nodes/sequentialagents/Start/Start.ts",
    "inputs": "{ label: 'Chat Model', name: 'model', type: 'BaseChatModel', description: `Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat` }, { label: 'Agent Memory', name: 'agentMemory', type: 'BaseCheckpointSaver', description: 'Save the state of the agent', optional: true }, { label: 'State', name: 'state'",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "State",
    "desc": "A centralized state object, updated by nodes in the graph, passing from one node to another",
    "path": "Flowise/packages/components/nodes/sequentialagents/State/State.ts",
    "inputs": "{ label: 'Custom State', name: 'stateMemory', type: 'tabs', tabIdentifier: TAB_IDENTIFIER, additionalParams: true, default: 'stateMemoryUI', tabs: [ { label: 'Custom State (Table)', name: 'stateMemoryUI', type: 'datagrid', description: 'Structure for state. By default, state contains \"messages\" that got updated with each message sent and received.', hint: { label: 'How to use', value: howToUse }, ",
    "outputs": ""
  },
  {
    "categoria": "sequentialagents",
    "label": "Tool Node",
    "desc": "Require approval before executing tools",
    "path": "Flowise/packages/components/nodes/sequentialagents/ToolNode/ToolNode.ts",
    "inputs": "{ label: 'Tools', name: 'tools', type: 'Tool', list: true, optional: true }, { label: 'LLM Node', name: 'llmNode', type: 'LLMNode' }, { label: 'Name', name: 'toolNodeName', type: 'string', placeholder: 'Tool' }, { label: 'Require Approval', name: 'interrupt', description: 'Require approval before executing tools', type: 'boolean', optional: true }, { label: 'Approval Prompt', name: 'approvalPrompt",
    "outputs": ""
  },
  {
    "categoria": "speechtotext",
    "label": "AssemblyAI",
    "desc": "",
    "path": "Flowise/packages/components/nodes/speechtotext/assemblyai/AssemblyAI.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "textsplitters",
    "label": "Character Text Splitter",
    "desc": "Number of characters in each chunk. Default is 1000.",
    "path": "Flowise/packages/components/nodes/textsplitters/CharacterTextSplitter/CharacterTextSplitter.ts",
    "inputs": "{ label: 'Chunk Size', name: 'chunkSize', type: 'number', description: 'Number of characters in each chunk. Default is 1000.', default: 1000, optional: true }, { label: 'Chunk Overlap', name: 'chunkOverlap', type: 'number', description: 'Number of characters to overlap between chunks. Default is 200.', default: 200, optional: true }, { label: 'Custom Separator', name: 'separator', type: 'string', ",
    "outputs": ""
  },
  {
    "categoria": "textsplitters",
    "label": "Code Text Splitter",
    "desc": "Number of characters in each chunk. Default is 1000.",
    "path": "Flowise/packages/components/nodes/textsplitters/CodeTextSplitter/CodeTextSplitter.ts",
    "inputs": "{ label: 'Language', name: 'language', type: 'options', options: [ { label: 'cpp', name: 'cpp' }, { label: 'go', name: 'go' }, { label: 'java', name: 'java' }, { label: 'js', name: 'js' }, { label: 'php', name: 'php' }, { label: 'proto', name: 'proto' }, { label: 'python', name: 'python' }, { label: 'rst', name: 'rst' }, { label: 'ruby', name: 'ruby' }, { label: 'rust', name: 'rust' }, { label: 's",
    "outputs": ""
  },
  {
    "categoria": "textsplitters",
    "label": "HtmlToMarkdown Text Splitter",
    "desc": "Number of characters in each chunk. Default is 1000.",
    "path": "Flowise/packages/components/nodes/textsplitters/HtmlToMarkdownTextSplitter/HtmlToMarkdownTextSplitter.ts",
    "inputs": "{ label: 'Chunk Size', name: 'chunkSize', type: 'number', description: 'Number of characters in each chunk. Default is 1000.', default: 1000, optional: true }, { label: 'Chunk Overlap', name: 'chunkOverlap', type: 'number', description: 'Number of characters to overlap between chunks. Default is 200.', default: 200, optional: true }",
    "outputs": ""
  },
  {
    "categoria": "textsplitters",
    "label": "Markdown Text Splitter",
    "desc": "Number of characters in each chunk. Default is 1000.",
    "path": "Flowise/packages/components/nodes/textsplitters/MarkdownTextSplitter/MarkdownTextSplitter.ts",
    "inputs": "{ label: 'Chunk Size', name: 'chunkSize', type: 'number', description: 'Number of characters in each chunk. Default is 1000.', default: 1000, optional: true }, { label: 'Chunk Overlap', name: 'chunkOverlap', type: 'number', description: 'Number of characters to overlap between chunks. Default is 200.', default: 200, optional: true }, { label: 'Split by Headers', name: 'splitByHeaders', type: 'opti",
    "outputs": ""
  },
  {
    "categoria": "textsplitters",
    "label": "Recursive Character Text Splitter",
    "desc": "Number of characters in each chunk. Default is 1000.",
    "path": "Flowise/packages/components/nodes/textsplitters/RecursiveCharacterTextSplitter/RecursiveCharacterTextSplitter.ts",
    "inputs": "{ label: 'Chunk Size', name: 'chunkSize', type: 'number', description: 'Number of characters in each chunk. Default is 1000.', default: 1000, optional: true }, { label: 'Chunk Overlap', name: 'chunkOverlap', type: 'number', description: 'Number of characters to overlap between chunks. Default is 200.', default: 200, optional: true }, { label: 'Custom Separators', name: 'separators', type: 'string'",
    "outputs": ""
  },
  {
    "categoria": "textsplitters",
    "label": "Token Text Splitter",
    "desc": "Number of characters in each chunk. Default is 1000.",
    "path": "Flowise/packages/components/nodes/textsplitters/TokenTextSplitter/TokenTextSplitter.ts",
    "inputs": "{ label: 'Encoding Name', name: 'encodingName', type: 'options', options: [ { label: 'gpt2', name: 'gpt2' }, { label: 'r50k_base', name: 'r50k_base' }, { label: 'p50k_base', name: 'p50k_base' }, { label: 'p50k_edit', name: 'p50k_edit' }, { label: 'cl100k_base', name: 'cl100k_base' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Agent as Tool",
    "desc": "Use as a tool to execute another agentflow",
    "path": "Flowise/packages/components/nodes/tools/AgentAsTool/AgentAsTool.ts",
    "inputs": "{ label: 'Select Agent', name: 'selectedAgentflow', type: 'asyncOptions', loadMethod: 'listAgentflows' }, { label: 'Tool Name', name: 'name', type: 'string' }, { label: 'Tool Description', name: 'description', type: 'string', description: 'Description of what the tool does. This is for LLM to determine when to use this tool.', rows: 3, placeholder: 'State of the Union QA - useful for when you need",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Arxiv",
    "desc": "Search and read content from academic papers on Arxiv",
    "path": "Flowise/packages/components/nodes/tools/Arxiv/Arxiv.ts",
    "inputs": "{ label: 'Name', name: 'arxivName', type: 'string', default: 'arxiv_search', description: 'Name of the tool', additionalParams: true, optional: true }, { label: 'Description', name: 'arxivDescription', type: 'string', rows: 4, default: desc, description: 'Describe to LLM when it should use this tool', additionalParams: true, optional: true }, { label: 'Top K Results', name: 'topKResults', type: 'n",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "AWS SNS",
    "desc": "Publish messages to AWS SNS topics",
    "path": "Flowise/packages/components/nodes/tools/AWSSNS/AWSSNS.ts",
    "inputs": "{ label: 'AWS Region', name: 'region', type: 'options', options: [ { label: 'US East (N. Virginia) - us-east-1', name: 'us-east-1' }, { label: 'US East (Ohio) - us-east-2', name: 'us-east-2' }, { label: 'US West (N. California) - us-west-1', name: 'us-west-1' }, { label: 'US West (Oregon) - us-west-2', name: 'us-west-2' }, { label: 'Africa (Cape Town) - af-south-1', name: 'af-south-1' }, { label: ",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Brave Search MCP",
    "desc": "MCP server that integrates the Brave Search API - a real-time API to access web search capabilities",
    "path": "Flowise/packages/components/nodes/tools/MCP/BraveSearch/BraveSearchMCP.ts",
    "inputs": "{ label: 'Available Actions', name: 'mcpActions', type: 'asyncMultiOptions', loadMethod: 'listActions', refresh: true }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "BraveSearch API",
    "desc": "Wrapper around BraveSearch API - a real-time API to access Brave search results",
    "path": "Flowise/packages/components/nodes/tools/BraveSearchAPI/BraveSearchAPI.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Calculator",
    "desc": "Perform calculations on response",
    "path": "Flowise/packages/components/nodes/tools/Calculator/Calculator.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Chain Tool",
    "desc": "Use a chain as allowed tool for agent",
    "path": "Flowise/packages/components/nodes/tools/ChainTool/ChainTool.ts",
    "inputs": "{ label: 'Chain Name', name: 'name', type: 'string', placeholder: 'state-of-union-qa' }, { label: 'Chain Description', name: 'description', type: 'string', rows: 3, placeholder: 'State of the Union QA - useful for when you need to ask questions about the most recent state of the union address.' }, { label: 'Return Direct', name: 'returnDirect', type: 'boolean', optional: true }, { label: 'Base Cha",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Chatflow Tool",
    "desc": "Use as a tool to execute another chatflow",
    "path": "Flowise/packages/components/nodes/tools/ChatflowTool/ChatflowTool.ts",
    "inputs": "{ label: 'Select Chatflow', name: 'selectedChatflow', type: 'asyncOptions', loadMethod: 'listChatflows' }, { label: 'Tool Name', name: 'name', type: 'string' }, { label: 'Tool Description', name: 'description', type: 'string', description: 'Description of what the tool does. This is for LLM to determine when to use this tool.', rows: 3, placeholder: 'State of the Union QA - useful for when you nee",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Code Interpreter by E2B",
    "desc": "Execute code in a sandbox environment",
    "path": "Flowise/packages/components/nodes/tools/CodeInterpreterE2B/CodeInterpreterE2B.ts",
    "inputs": "{ label: 'Tool Name', name: 'toolName', type: 'string', description: 'Specify the name of the tool', default: 'code_interpreter' }, { label: 'Tool Description', name: 'toolDesc', type: 'string', rows: 4, description: 'Specify the description of the tool', default: DESC }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Composio",
    "desc": "Toolset with over 250+ Apps for building AI-powered applications",
    "path": "Flowise/packages/components/nodes/tools/Composio/Composio.ts",
    "inputs": "{ label: 'App Name', name: 'appName', type: 'asyncOptions', loadMethod: 'listApps', description: 'Select the app to connect with', refresh: true }, { label: 'Auth Status', name: 'authStatus', type: 'asyncOptions', loadMethod: 'authStatus', placeholder: 'Connection status will appear here', refresh: true }, { label: 'Actions to Use', name: 'actions', type: 'asyncMultiOptions', loadMethod: 'listActi",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "CurrentDateTime",
    "desc": "Get todays day, date and time.",
    "path": "Flowise/packages/components/nodes/tools/CurrentDateTime/CurrentDateTime.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Custom MCP",
    "desc": "Custom MCP Config",
    "path": "Flowise/packages/components/nodes/tools/MCP/CustomMCP/CustomMCP.ts",
    "inputs": "{ label: 'MCP Server Config', name: 'mcpServerConfig', type: 'code', hideCodeExecute: true, hint: { label: 'How to use', value: howToUseCode }, placeholder: mcpServerConfig, warning: process.env.CUSTOM_MCP_SECURITY_CHECK === 'true' ? 'In next release, only Remote MCP with url is supported. Read more <a href=\"https://docs.flowiseai.com/tutorials/tools-and-mcp#streamable-http-recommended\" target=\"_b",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Custom Tool",
    "desc": "Return the output of the tool directly to the user",
    "path": "Flowise/packages/components/nodes/tools/CustomTool/CustomTool.ts",
    "inputs": "{ label: 'Select Tool', name: 'selectedTool', type: 'asyncOptions', loadMethod: 'listTools' }, { label: 'Return Direct', name: 'returnDirect', description: 'Return the output of the tool directly to the user', type: 'boolean', optional: true }, { label: 'Custom Tool Name', name: 'customToolName', type: 'string', hidden: true }, { label: 'Custom Tool Description', name: 'customToolDesc', type: 'str",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Exa Search",
    "desc": "Wrapper around Exa Search API - search engine fully designed for use by LLMs",
    "path": "Flowise/packages/components/nodes/tools/ExaSearch/ExaSearch.ts",
    "inputs": "{ label: 'Tool Description', name: 'description', type: 'string', description: 'Description of what the tool does. This is for LLM to determine when to use this tool.', rows: 4, additionalParams: true, default: DESC }, { label: 'Num of Results', name: 'numResults', type: 'number', optional: true, step: 1, additionalParams: true, description: 'Number of search results to return. Default 10. Max 10 ",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Github MCP",
    "desc": "MCP Server for the GitHub API",
    "path": "Flowise/packages/components/nodes/tools/MCP/Github/GithubMCP.ts",
    "inputs": "{ label: 'Available Actions', name: 'mcpActions', type: 'asyncMultiOptions', loadMethod: 'listActions', refresh: true }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Gmail",
    "desc": "Perform Gmail operations for drafts, messages, labels, and threads",
    "path": "Flowise/packages/components/nodes/tools/Gmail/Gmail.ts",
    "inputs": "{ label: 'Type', name: 'gmailType', type: 'options', options: [ { label: 'Drafts', name: 'drafts' }, { label: 'Messages', name: 'messages' }, { label: 'Labels', name: 'labels' }, { label: 'Threads', name: 'threads' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Google Calendar",
    "desc": "Perform Google Calendar operations such as managing events, calendars, and checking availability",
    "path": "Flowise/packages/components/nodes/tools/GoogleCalendar/GoogleCalendar.ts",
    "inputs": "{ label: 'Type', name: 'calendarType', type: 'options', description: 'Type of Google Calendar operation', options: [ { label: 'Event', name: 'event' }, { label: 'Calendar', name: 'calendar' }, { label: 'Freebusy', name: 'freebusy' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Google Custom Search",
    "desc": "Wrapper around Google Custom Search API - a real-time API to access Google search results",
    "path": "Flowise/packages/components/nodes/tools/GoogleSearchAPI/GoogleSearchAPI.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Google Docs",
    "desc": "Perform Google Docs operations such as creating, reading, updating, and deleting documents, as well as text manipulation",
    "path": "Flowise/packages/components/nodes/tools/GoogleDocs/GoogleDocs.ts",
    "inputs": "// Document Actions { label: 'Actions', name: 'actions', type: 'multiOptions', description: 'Actions to perform', options: [ { label: 'Create Document', name: 'createDocument' }, { label: 'Get Document', name: 'getDocument' }, { label: 'Update Document', name: 'updateDocument' }, { label: 'Insert Text', name: 'insertText' }, { label: 'Replace Text', name: 'replaceText' }, { label: 'Append Text', n",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Google Drive",
    "desc": "Perform Google Drive operations such as managing files, folders, sharing, and searching",
    "path": "Flowise/packages/components/nodes/tools/GoogleDrive/GoogleDrive.ts",
    "inputs": "{ label: 'Type', name: 'driveType', type: 'options', description: 'Type of Google Drive operation', options: [ { label: 'File', name: 'file' }, { label: 'Folder', name: 'folder' }, { label: 'Search', name: 'search' }, { label: 'Share', name: 'share' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Google Sheets",
    "desc": "Perform Google Sheets operations such as managing spreadsheets, reading and writing values",
    "path": "Flowise/packages/components/nodes/tools/GoogleSheets/GoogleSheets.ts",
    "inputs": "{ label: 'Type', name: 'sheetsType', type: 'options', description: 'Type of Google Sheets operation', options: [ { label: 'Spreadsheet', name: 'spreadsheet' }, { label: 'Values', name: 'values' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Jira",
    "desc": "Perform Jira operations for issues, comments, and users",
    "path": "Flowise/packages/components/nodes/tools/Jira/Jira.ts",
    "inputs": "{ label: 'Host', name: 'jiraHost', type: 'string', placeholder: 'https://example.atlassian.net' }, { label: 'Type', name: 'jiraType', type: 'options', options: [ { label: 'Issues', name: 'issues' }, { label: 'Issue Comments', name: 'comments' }, { label: 'Users', name: 'users' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "JSON Path Extractor",
    "desc": "Extract values from JSON using path expressions",
    "path": "Flowise/packages/components/nodes/tools/JSONPathExtractor/JSONPathExtractor.ts",
    "inputs": "{ label: 'JSON Path', name: 'path', type: 'string', description: 'Path to extract. Examples: data, user.name, items[0",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Microsoft Outlook",
    "desc": "Perform Microsoft Outlook operations for calendars, events, and messages",
    "path": "Flowise/packages/components/nodes/tools/MicrosoftOutlook/MicrosoftOutlook.ts",
    "inputs": "{ label: 'Type', name: 'outlookType', type: 'options', options: [ { label: 'Calendar', name: 'calendar' }, { label: 'Message', name: 'message' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Microsoft Teams",
    "desc": "Perform Microsoft Teams operations for channels, chats, and chat messages",
    "path": "Flowise/packages/components/nodes/tools/MicrosoftTeams/MicrosoftTeams.ts",
    "inputs": "{ label: 'Type', name: 'teamsType', type: 'options', options: [ { label: 'Channel', name: 'channel' }, { label: 'Chat', name: 'chat' }, { label: 'Chat Message', name: 'chatMessage' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "OpenAPI Toolkit",
    "desc": "Load OpenAPI specification, and converts each API endpoint to a tool",
    "path": "Flowise/packages/components/nodes/tools/OpenAPIToolkit/OpenAPIToolkit.ts",
    "inputs": "{ label: 'YAML File', name: 'yamlFile', type: 'file', fileType: '.yaml' }, { label: 'Return Direct', name: 'returnDirect', description: 'Return the output of the tool directly to the user', type: 'boolean', optional: true }, { label: 'Headers', name: 'headers', type: 'json', description: 'Request headers to be sent with the API request. For example, {\"Authorization\": \"Bearer token\"}', additionalPa",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "PostgreSQL MCP",
    "desc": "MCP server that provides read-only access to PostgreSQL databases",
    "path": "Flowise/packages/components/nodes/tools/MCP/PostgreSQL/PostgreSQLMCP.ts",
    "inputs": "{ label: 'Available Actions', name: 'mcpActions', type: 'asyncMultiOptions', loadMethod: 'listActions', refresh: true }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "QueryEngine Tool",
    "desc": "Tool used to invoke query engine",
    "path": "Flowise/packages/components/nodes/tools/QueryEngineTool/QueryEngineTool.ts",
    "inputs": "{ label: 'Base QueryEngine', name: 'baseQueryEngine', type: 'BaseQueryEngine' }, { label: 'Tool Name', name: 'toolName', type: 'string', description: 'Tool name must be small capital letter with underscore. Ex: my_tool' }, { label: 'Tool Description', name: 'toolDesc', type: 'string', rows: 4 }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Read File",
    "desc": "Read file from disk",
    "path": "Flowise/packages/components/nodes/tools/ReadFile/ReadFile.ts",
    "inputs": "{ label: 'Base Path', name: 'basePath', placeholder: `C:\\\\Users\\\\User\\\\Desktop`, type: 'string', optional: true }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Requests Delete",
    "desc": "Execute HTTP DELETE requests",
    "path": "Flowise/packages/components/nodes/tools/RequestsDelete/RequestsDelete.ts",
    "inputs": "{ label: 'URL', name: 'requestsDeleteUrl', type: 'string', acceptVariable: true }, { label: 'Name', name: 'requestsDeleteName', type: 'string', default: 'requests_delete', description: 'Name of the tool', additionalParams: true, optional: true }, { label: 'Description', name: 'requestsDeleteDescription', type: 'string', rows: 4, default: desc, description: 'Describe to LLM when it should use this ",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Requests Get",
    "desc": "Execute HTTP GET requests",
    "path": "Flowise/packages/components/nodes/tools/RequestsGet/RequestsGet.ts",
    "inputs": "{ label: 'URL', name: 'requestsGetUrl', type: 'string', acceptVariable: true }, { label: 'Name', name: 'requestsGetName', type: 'string', default: 'requests_get', description: 'Name of the tool', additionalParams: true, optional: true }, { label: 'Description', name: 'requestsGetDescription', type: 'string', rows: 4, default: desc, description: 'Describe to LLM when it should use this tool', addit",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Requests Post",
    "desc": "Execute HTTP POST requests",
    "path": "Flowise/packages/components/nodes/tools/RequestsPost/RequestsPost.ts",
    "inputs": "{ label: 'URL', name: 'requestsPostUrl', type: 'string', acceptVariable: true }, { label: 'Name', name: 'requestsPostName', type: 'string', default: 'requests_post', description: 'Name of the tool', additionalParams: true, optional: true }, { label: 'Description', name: 'requestsPostDescription', type: 'string', rows: 4, default: desc, description: 'Describe to LLM when it should use this tool', a",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Requests Put",
    "desc": "Execute HTTP PUT requests",
    "path": "Flowise/packages/components/nodes/tools/RequestsPut/RequestsPut.ts",
    "inputs": "{ label: 'URL', name: 'requestsPutUrl', type: 'string', acceptVariable: true }, { label: 'Name', name: 'requestsPutName', type: 'string', default: 'requests_put', description: 'Name of the tool', additionalParams: true, optional: true }, { label: 'Description', name: 'requestsPutDescription', type: 'string', rows: 4, default: desc, description: 'Describe to LLM when it should use this tool', addit",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Retriever Tool",
    "desc": "Use a retriever as allowed tool for agent",
    "path": "Flowise/packages/components/nodes/tools/RetrieverTool/RetrieverTool.ts",
    "inputs": "{ label: 'Retriever Name', name: 'name', type: 'string', placeholder: 'search_state_of_union' }, { label: 'Retriever Description', name: 'description', type: 'string', description: 'When should agent uses to retrieve documents', rows: 3, placeholder: 'Searches and returns documents regarding the state-of-the-union.' }, { label: 'Retriever', name: 'retriever', type: 'BaseRetriever' }, { label: 'Ret",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "SearchApi",
    "desc": "Real-time API for accessing Google Search data",
    "path": "Flowise/packages/components/nodes/tools/SearchApi/SearchAPI.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "SearXNG",
    "desc": "Wrapper around SearXNG - a free internet metasearch engine",
    "path": "Flowise/packages/components/nodes/tools/Searxng/Searxng.ts",
    "inputs": "{ label: 'Base URL', name: 'apiBase', type: 'string', default: 'http://localhost:8080' }, { label: 'Tool Name', name: 'toolName', type: 'string', default: defaultName }, { label: 'Tool Description', name: 'toolDescription', type: 'string', rows: 4, default: defaultDesc }, { label: 'Headers', name: 'headers', type: 'json', description: 'Custom headers for the request', optional: true, additionalPar",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Sequential Thinking MCP",
    "desc": "MCP server that provides a tool for dynamic and reflective problem-solving through a structured thinking process",
    "path": "Flowise/packages/components/nodes/tools/MCP/SequentialThinking/SequentialThinkingMCP.ts",
    "inputs": "{ label: 'Available Actions', name: 'mcpActions', type: 'asyncMultiOptions', loadMethod: 'listActions', refresh: true }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Serp API",
    "desc": "Wrapper around SerpAPI - a real-time API to access Google search results",
    "path": "Flowise/packages/components/nodes/tools/SerpAPI/SerpAPI.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Serper",
    "desc": "Wrapper around Serper.dev - Google Search API",
    "path": "Flowise/packages/components/nodes/tools/Serper/Serper.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Slack MCP",
    "desc": "MCP Server for the Slack API",
    "path": "Flowise/packages/components/nodes/tools/MCP/Slack/SlackMCP.ts",
    "inputs": "{ label: 'Available Actions', name: 'mcpActions', type: 'asyncMultiOptions', loadMethod: 'listActions', refresh: true }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "StripeAgentTool",
    "desc": "Use Stripe Agent function calling for financial transactions",
    "path": "Flowise/packages/components/nodes/tools/StripeTool/StripeTool.ts",
    "inputs": "{ label: 'Payment Links', name: 'paymentLinks', type: 'multiOptions', options: [ { label: 'Create', name: 'create' }, { label: 'Update', name: 'update' }, { label: 'Read', name: 'read' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Supergateway MCP",
    "desc": "Runs MCP stdio-based servers over SSE (Server-Sent Events) or WebSockets (WS)",
    "path": "Flowise/packages/components/nodes/tools/MCP/Supergateway/SupergatewayMCP.ts",
    "inputs": "{ label: 'Arguments', name: 'arguments', type: 'string', rows: 4, placeholder: '--sse \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"', description: 'Arguments to pass to the supergateway server. Refer to the <a href=\"https://github.com/supercorp-ai/supergateway/blob/main/README.md\" target=\"_blank\">documentation</a> for more information.' }, { label: 'Available Actions',",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Tavily API",
    "desc": "Wrapper around TavilyAPI - A specialized search engine designed for LLMs and AI agents",
    "path": "Flowise/packages/components/nodes/tools/TavilyAPI/TavilyAPI.ts",
    "inputs": "{ label: 'Topic', name: 'topic', type: 'options', options: [ { label: 'General', name: 'general' }, { label: 'News', name: 'news' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Web Browser",
    "desc": "Gives agent the ability to visit a website and extract information",
    "path": "Flowise/packages/components/nodes/tools/WebBrowser/WebBrowser.ts",
    "inputs": "{ label: 'Language Model', name: 'model', type: 'BaseLanguageModel' }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Web Scraper Tool",
    "desc": "Scrapes web pages recursively by following links OR by fetching URLs from the default sitemap.",
    "path": "Flowise/packages/components/nodes/tools/WebScraperTool/WebScraperTool.ts",
    "inputs": "{ label: 'Scraping Mode', name: 'scrapeMode', type: 'options', options: [ { label: 'Recursive Link Following', name: 'recursive' }, { label: 'Sitemap', name: 'sitemap' }",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "WolframAlpha",
    "desc": "Wrapper around WolframAlpha - a powerful computational knowledge engine",
    "path": "Flowise/packages/components/nodes/tools/WolframAlpha/WolframAlpha.ts",
    "inputs": "",
    "outputs": ""
  },
  {
    "categoria": "tools",
    "label": "Write File",
    "desc": "Write file to disk",
    "path": "Flowise/packages/components/nodes/tools/WriteFile/WriteFile.ts",
    "inputs": "{ label: 'Base Path', name: 'basePath', placeholder: `C:\\\\Users\\\\User\\\\Desktop`, type: 'string', optional: true }",
    "outputs": ""
  },
  {
    "categoria": "utilities",
    "label": "Custom JS Function",
    "desc": "Input variables can be used in the function with prefix $. For example: $var",
    "path": "Flowise/packages/components/nodes/utilities/CustomFunction/CustomFunction.ts",
    "inputs": "{ label: 'Input Variables', name: 'functionInputVariables', description: 'Input variables can be used in the function with prefix $. For example: $var', type: 'json', optional: true, acceptVariable: true, list: true }, { label: 'Function Name', name: 'functionName', type: 'string', optional: true, placeholder: 'My Function' }, { label: 'Additional Tools', description: 'Tools can be used in the fun",
    "outputs": "{ label: 'Output', name: 'output', baseClasses: ['string', 'number', 'boolean', 'json', 'array'"
  },
  {
    "categoria": "utilities",
    "label": "Get Variable",
    "desc": "",
    "path": "Flowise/packages/components/nodes/utilities/GetVariable/GetVariable.ts",
    "inputs": "{ label: 'Variable Name', name: 'variableName', type: 'string', placeholder: 'var1' }",
    "outputs": "{ label: 'Output', name: 'output', baseClasses: ['string', 'number', 'boolean', 'json', 'array'"
  },
  {
    "categoria": "utilities",
    "label": "IfElse Function",
    "desc": "Input variables can be used in the function with prefix $. For example: $var",
    "path": "Flowise/packages/components/nodes/utilities/IfElseFunction/IfElseFunction.ts",
    "inputs": "{ label: 'Input Variables', name: 'functionInputVariables', description: 'Input variables can be used in the function with prefix $. For example: $var', type: 'json', optional: true, acceptVariable: true, list: true }, { label: 'IfElse Name', name: 'functionName', type: 'string', optional: true, placeholder: 'If Condition Match' }, { label: 'If Function', name: 'ifFunction', description: 'Function",
    "outputs": "{ label: 'True', name: 'returnTrue', baseClasses: ['string', 'number', 'boolean', 'json', 'array'"
  },
  {
    "categoria": "utilities",
    "label": "Set Variable",
    "desc": "Show the output result in the Prediction API response",
    "path": "Flowise/packages/components/nodes/utilities/SetVariable/SetVariable.ts",
    "inputs": "{ label: 'Input', name: 'input', type: 'string | number | boolean | json | array', optional: true, list: true }, { label: 'Variable Name', name: 'variableName', type: 'string', placeholder: 'var1' }, { label: 'Show Output', name: 'showOutput', description: 'Show the output result in the Prediction API response', type: 'boolean', optional: true, additionalParams: true }",
    "outputs": "{ label: 'Output', name: 'output', baseClasses: ['string', 'number', 'boolean', 'json', 'array'"
  },
  {
    "categoria": "utilities",
    "label": "Sticky Note",
    "desc": "Add a sticky note",
    "path": "Flowise/packages/components/nodes/utilities/StickyNote/StickyNote.ts",
    "inputs": "{ label: '', name: 'note', type: 'string', rows: 1, placeholder: 'Type something here', optional: true }",
    "outputs": ""
  },
  {
    "categoria": "vectorstores",
    "label": "Astra",
    "desc": "Dimension used for storing vector embedding",
    "path": "Flowise/packages/components/nodes/vectorstores/Astra/Astra.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Namespace', name: 'astraNamespace', type: 'string' }, { label: 'Collection', name: 'astraCollection', type: 'string' }, { label: 'Vector Dimension', name: 'vectorDimension', type: 'number', placeholder: '1536', optional: true, description",
    "outputs": "{ label: 'Astra Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Astra Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(AstraDBVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "AWS Kendra",
    "desc": "The ID of your AWS Kendra index",
    "path": "Flowise/packages/components/nodes/vectorstores/Kendra/Kendra.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Region', name: 'region', type: 'asyncOptions', loadMethod: 'listRegions', default: 'us-east-1' }, { label: 'Kendra Index ID', name: 'indexId', type: 'string', placeholder: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', description: 'The ID of your AWS Kendra index' }, { label: 'File Upload', name: 'fileUpload",
    "outputs": "{ label: 'Kendra Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Kendra Vector Store', name: 'vectorStore', baseClasses: [this.type, 'BaseRetriever'"
  },
  {
    "categoria": "vectorstores",
    "label": "Chroma",
    "desc": "Upsert embedded data and perform similarity search upon query using Chroma, an open-source embedding database",
    "path": "Flowise/packages/components/nodes/vectorstores/Chroma/Chroma.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Collection Name', name: 'collectionName', type: 'string' }, { label: 'Chroma URL', ",
    "outputs": "{ label: 'Chroma Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Chroma Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(Chroma)"
  },
  {
    "categoria": "vectorstores",
    "label": "Couchbase",
    "desc": "Name of the field (column) that contains the actual content",
    "path": "Flowise/packages/components/nodes/vectorstores/Couchbase/Couchbase.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Bucket Name', name: 'bucketName', placeholder: '<DB_BUCKET_NAME>', type: 'string' }, { label: 'Scope Name', name: 'scopeName', placeholder: '<SCOPE_NAME>', type: 'string' }, { label: 'Collection Name', name: 'collectionName', placeholder:",
    "outputs": "{ label: 'Couchbase Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Couchbase Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(CouchbaseVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Document Store (Vector)",
    "desc": "",
    "path": "Flowise/packages/components/nodes/vectorstores/DocumentStoreVS/DocStoreVector.ts",
    "inputs": "{ label: 'Select Store', name: 'selectedStore', type: 'asyncOptions', loadMethod: 'listStores' }",
    "outputs": "{ label: 'Retriever', name: 'retriever', baseClasses: ['BaseRetriever'"
  },
  {
    "categoria": "vectorstores",
    "label": "Elasticsearch",
    "desc": "Upsert embedded data and perform similarity search upon query using Elasticsearch, a distributed search and analytics engine",
    "path": "Flowise/packages/components/nodes/vectorstores/Elasticsearch/Elasticsearch.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Index Name', name: 'indexName', placeholder: '<INDEX_NAME>', type: 'string' }, { la",
    "outputs": "{ label: 'Elasticsearch Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Elasticsearch Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(ElasticVectorSearch)"
  },
  {
    "categoria": "vectorstores",
    "label": "Faiss",
    "desc": "Upsert embedded data and perform similarity search upon query using Faiss library from Meta",
    "path": "Flowise/packages/components/nodes/vectorstores/Faiss/Faiss.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Base Path to load', name: 'basePath', description: 'Path to load faiss.index file', placeholder: `C:\\\\Users\\\\User\\\\Desktop`, type: 'string' }, { label: 'Top K', name: 'topK', description: 'Number of top results to fetch. Default to 4', pl",
    "outputs": "{ label: 'Faiss Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Faiss Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(FaissStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "In-Memory Vector Store",
    "desc": "In-memory vectorstore that stores embeddings and does an exact, linear search for the most similar embeddings.",
    "path": "Flowise/packages/components/nodes/vectorstores/InMemory/InMemoryVectorStore.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Top K', name: 'topK', description: 'Number of top results to fetch. Default to 4', placeholder: '4', type: 'number', optional: true }",
    "outputs": "{ label: 'Memory Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Memory Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(MemoryVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Meilisearch",
    "desc": "This is the URL for the desired Meilisearch instance, the URL must not end with a",
    "path": "Flowise/packages/components/nodes/vectorstores/Meilisearch/Meilisearch.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Host', name: 'host', type: 'string', description: \"This is the URL for the desired Meilisearch instance, the URL must not end with a '/'\" }, { label: 'Index Uid', name: 'indexUid', type: 'string', description: 'UID for the index to answer",
    "outputs": "{ label: 'Meilisearch Retriever', name: 'MeilisearchRetriever', description: 'retrieve answers', baseClasses: this.baseClasses }"
  },
  {
    "categoria": "vectorstores",
    "label": "Milvus",
    "desc": "Allow file upload on the chat",
    "path": "Flowise/packages/components/nodes/vectorstores/Milvus/Milvus.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Milvus Server URL', name: 'milvusServerUrl', type: 'string', placeholder: 'http://localhost:19530' }, { label: 'Milvus Collection Name', name: 'milvusCollection', type: 'string' }, { label: 'Milvus Partition Name', name: 'milvusPartition'",
    "outputs": "{ label: 'Milvus Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Milvus Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(Milvus)"
  },
  {
    "categoria": "vectorstores",
    "label": "MongoDB Atlas",
    "desc": "Name of the field (column) that contains the actual content",
    "path": "Flowise/packages/components/nodes/vectorstores/MongoDBAtlas/MongoDBAtlas.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Database', name: 'databaseName', placeholder: '<DB_NAME>', type: 'string' }, { label: 'Collection Name', name: 'collectionName', placeholder: '<COLLECTION_NAME>', type: 'string' }, { label: 'Index Name', name: 'indexName', placeholder: '<",
    "outputs": "{ label: 'MongoDB Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'MongoDB Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(MongoDBAtlasVectorSearch)"
  },
  {
    "categoria": "vectorstores",
    "label": "OpenSearch",
    "desc": "Number of top results to fetch. Default to 4",
    "path": "Flowise/packages/components/nodes/vectorstores/OpenSearch/OpenSearch.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Index Name', name: 'indexName', type: 'string' }, { label: 'Top K', name: 'topK', description: 'Number of top results to fetch. Default to 4', placeholder: '4', type: 'number', additionalParams: true, optional: true }",
    "outputs": "{ label: 'OpenSearch Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'OpenSearch Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(OpenSearchVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Pinecone",
    "desc": "Keep track of the record to prevent duplication",
    "path": "Flowise/packages/components/nodes/vectorstores/Pinecone/Pinecone.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Pinecone Index', name: 'pineconeIndex', type: 'string' }, { label: 'Pinecone Namesp",
    "outputs": "{ label: 'Pinecone Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Pinecone Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(PineconeStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Pinecone",
    "desc": "Number of top results to fetch. Default to 4",
    "path": "Flowise/packages/components/nodes/vectorstores/Pinecone/Pinecone_LlamaIndex.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'Embeddings', name: 'embeddings', type: 'BaseEmbedding_LlamaIndex' }, { label: 'Pinecone Index', name: 'pineconeIndex', type: 'string' }, { label: 'Pinecone Namespace', name: 'pineconeNamespace', type: 'string', placeholder: 'my-f",
    "outputs": "{ label: 'Pinecone Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Pinecone Vector Store Index', name: 'vectorStore', baseClasses: [this.type, 'VectorStoreIndex'"
  },
  {
    "categoria": "vectorstores",
    "label": "Postgres",
    "desc": "Upsert embedded data and perform similarity search upon query using pgvector on Postgres",
    "path": "Flowise/packages/components/nodes/vectorstores/Postgres/Postgres.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Host', name: 'host', type: 'string', placeholder: getHost(), optional: !!getHost() ",
    "outputs": "{ label: 'Postgres Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Postgres Vector Store', name: 'vectorStore', baseClasses: [ this.type, // ...getBaseClasses(VectorStore), // disabled temporarily for using TypeORM ...getVectorStoreBaseClasses() // added temporarily for using TypeORM"
  },
  {
    "categoria": "vectorstores",
    "label": "Qdrant",
    "desc": "Upsert embedded data and perform similarity search upon query using Qdrant, a scalable open source vector database written in Rust",
    "path": "Flowise/packages/components/nodes/vectorstores/Qdrant/Qdrant.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Qdrant Server URL', name: 'qdrantServerUrl', type: 'string', placeholder: 'http://l",
    "outputs": "{ label: 'Qdrant Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Qdrant Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(QdrantVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Redis",
    "desc": "Upsert embedded data and perform similarity search upon query using Redis, an open source, in-memory data structure store",
    "path": "Flowise/packages/components/nodes/vectorstores/Redis/Redis.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Index Name', name: 'indexName', placeholder: '<VECTOR_INDEX_NAME>', type: 'string' }, { label: 'Replace Index on Upsert', name: 'replaceIndex', description: 'Selecting this option will delete the existing index and recreate a new one when",
    "outputs": "{ label: 'Redis Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Redis Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(RedisVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "SimpleStore",
    "desc": "Upsert embedded data to local path and perform similarity search",
    "path": "Flowise/packages/components/nodes/vectorstores/SimpleStore/SimpleStore.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Chat Model', name: 'model', type: 'BaseChatModel_LlamaIndex' }, { label: 'Embeddings', name: 'embeddings', type: 'BaseEmbedding_LlamaIndex' }, { label: 'Base Path to store', name: 'basePath', description: 'Path to store persist embeddings indexes with persistence. If not specified, default to same path",
    "outputs": "{ label: 'SimpleStore Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'SimpleStore Vector Store Index', name: 'vectorStore', baseClasses: [this.type, 'VectorStoreIndex'"
  },
  {
    "categoria": "vectorstores",
    "label": "SingleStore",
    "desc": "Upsert embedded data and perform similarity search upon query using SingleStore, a fast and distributed cloud relational database",
    "path": "Flowise/packages/components/nodes/vectorstores/Singlestore/Singlestore.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Host', name: 'host', type: 'string' }, { label: 'Database', name: 'database', type: 'string' }, { label: 'Table Name', name: 'tableName', type: 'string', placeholder: 'embeddings', additionalParams: true, optional: true }, { label: 'Conte",
    "outputs": "{ label: 'SingleStore Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'SingleStore Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(SingleStoreVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Supabase",
    "desc": "Upsert embedded data and perform similarity or mmr search upon query using Supabase via pgvector extension",
    "path": "Flowise/packages/components/nodes/vectorstores/Supabase/Supabase.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Supabase Project URL', name: 'supabaseProjUrl', type: 'string' }, { label: 'Table N",
    "outputs": "{ label: 'Supabase Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Supabase Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(SupabaseVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Upstash Vector",
    "desc": "Upsert data as embedding or string and perform similarity search with Upstash, the leading serverless data platform",
    "path": "Flowise/packages/components/nodes/vectorstores/Upstash/Upstash.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'File Upload', name: 'fileUpload', description: 'Allow file upload on the chat', hin",
    "outputs": "{ label: 'Upstash Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Upstash Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(UpstashVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Vectara",
    "desc": "Upsert embedded data and perform similarity search upon query using Vectara, a LLM-powered search-as-a-service",
    "path": "Flowise/packages/components/nodes/vectorstores/Vectara/Vectara.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'File', name: 'file', description: 'File to upload to Vectara. Supported file types: https://docs.vectara.com/docs/api-reference/indexing-apis/file-upload/file-upload-filetypes', type: 'file', optional: true }, { label: 'Metadata Filter', name: 'filter', description: 'Filter to apply to Vectara metadata",
    "outputs": "{ label: 'Vectara Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Vectara Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(VectaraStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Vectara Upload File",
    "desc": "Upload files to Vectara",
    "path": "Flowise/packages/components/nodes/vectorstores/Vectara/Vectara_Upload.ts",
    "inputs": "{ label: 'File', name: 'file', description: 'File to upload to Vectara. Supported file types: https://docs.vectara.com/docs/api-reference/indexing-apis/file-upload/file-upload-filetypes', type: 'file' }, { label: 'Metadata Filter', name: 'filter', description: 'Filter to apply to Vectara metadata. Refer to the <a target=\"_blank\" href=\"https://docs.flowiseai.com/vector-stores/vectara\">documentation",
    "outputs": "{ label: 'Vectara Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Vectara Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(VectaraStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Weaviate",
    "desc": "Upsert embedded data and perform similarity or mmr search using Weaviate, a scalable open-source vector database",
    "path": "Flowise/packages/components/nodes/vectorstores/Weaviate/Weaviate.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Record Manager', name: 'recordManager', type: 'RecordManager', description: 'Keep track of the record to prevent duplication', optional: true }, { label: 'Weaviate Scheme', name: 'weaviateScheme', type: 'options', default: 'https', option",
    "outputs": "{ label: 'Weaviate Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Weaviate Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(WeaviateStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Zep Collection - Cloud",
    "desc": "Upsert embedded data and perform similarity or mmr search upon query using Zep, a fast and scalable building block for LLM apps",
    "path": "Flowise/packages/components/nodes/vectorstores/ZepCloud/ZepCloud.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Zep Collection', name: 'zepCollection', type: 'string', placeholder: 'my-first-collection' }, { label: 'Zep Metadata Filter', name: 'zepMetadataFilter', type: 'json', optional: true, additionalParams: true }, { label: 'Top K', name: 'topK', description: 'Number of top results to fetch. Default to 4', p",
    "outputs": "{ label: 'Zep Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Zep Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(ZepVectorStore)"
  },
  {
    "categoria": "vectorstores",
    "label": "Zep Collection - Open Source",
    "desc": "Upsert embedded data and perform similarity or mmr search upon query using Zep, a fast and scalable building block for LLM apps",
    "path": "Flowise/packages/components/nodes/vectorstores/Zep/Zep.ts",
    "inputs": "{ label: 'Document', name: 'document', type: 'Document', list: true, optional: true }, { label: 'Embeddings', name: 'embeddings', type: 'Embeddings' }, { label: 'Base URL', name: 'baseURL', type: 'string', default: 'http://127.0.0.1:8000' }, { label: 'Zep Collection', name: 'zepCollection', type: 'string', placeholder: 'my-first-collection' }, { label: 'Zep Metadata Filter', name: 'zepMetadataFilt",
    "outputs": "{ label: 'Zep Retriever', name: 'retriever', baseClasses: this.baseClasses }, { label: 'Zep Vector Store', name: 'vectorStore', baseClasses: [this.type, ...getBaseClasses(ZepVectorStore)"
  }
]