'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Server, 
  Plus, 
  Settings, 
  Play, 
  CheckCircle, 
  XCircle, 
  Loader2,
  Wrench,
  Link,
  Unlink,
  Zap,
  Store,
  Activity,
  Heart,
  Globe,
  Terminal,
  Database,
  Bot,
  FileText,
  Star,
  MoreHorizontal,
  Copy,
  Trash2,
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  Switch,
  ChevronRight
} from 'lucide-react';

interface MCPServer {
  id: string;
  name: string;
  description?: string;
  type: 'stdio' | 'sse' | 'http';
  command?: string;
  args?: string;
  url?: string;
  env?: string;
  headers?: string;
  status: 'active' | 'inactive' | 'error';
  lastConnected?: string;
  workspace?: {
    id: string;
    name: string;
  };
  tools: MCPTool[];
  connections: MCPConnection[];
  _count: {
    tools: number;
    connections: number;
  };
}

interface MCPTool {
  id: string;
  name: string;
  description?: string;
  inputSchema: string;
  status: 'active' | 'inactive';
  server: {
    id: string;
    name: string;
    type: string;
    status: string;
  };
}

interface MCPConnection {
  id: string;
  serverId: string;
  toolId?: string;
  agentId?: string;
  config?: string;
  status: 'active' | 'inactive';
  lastUsed?: string;
  server: MCPServer;
  tool?: MCPTool;
  agent?: {
    id: string;
    name: string;
  };
}

interface Agent {
  id: string;
  name: string;
  description: string;
  type: 'template' | 'custom' | 'composed';
  status: 'active' | 'inactive' | 'training';
}

export default function MCPManager() {
  const [servers, setServers] = useState<MCPServer[]>([]);
  const [tools, setTools] = useState<MCPTool[]>([]);
  const [agents, setAgents] = useState<Agent[]>([]);
  const [isCreateServerOpen, setIsCreateServerOpen] = useState(false);
  const [isTestConnectionOpen, setIsTestConnectionOpen] = useState(false);
  const [selectedServer, setSelectedServer] = useState<string>('');
  const [testingServer, setTestingServer] = useState<string | null>(null);
  const [newServer, setNewServer] = useState({
    name: '',
    description: '',
    type: 'stdio' as 'stdio' | 'sse' | 'http',
    command: '',
    args: '',
    url: '',
    env: '',
    headers: ''
  });
  const [testConfig, setTestConfig] = useState({
    type: 'stdio' as 'stdio' | 'sse' | 'http',
    command: '',
    args: '',
    url: '',
    env: '',
    headers: ''
  });

  useEffect(() => {
    loadServers();
    loadTools();
    loadAgents();
  }, []);

  const loadServers = async () => {
    try {
      const response = await fetch('/admin/api/mcp/servers');
      if (response.ok) {
        const data = await response.json();
        setServers(data.servers || []);
      }
    } catch (error) {
      console.error('Erro ao carregar servidores MCP:', error);
    }
  };

  const loadTools = async () => {
    try {
      const response = await fetch('/admin/api/mcp/tools');
      if (response.ok) {
        const data = await response.json();
        setTools(data.tools || []);
      }
    } catch (error) {
      console.error('Erro ao carregar ferramentas MCP:', error);
    }
  };

  const loadAgents = async () => {
    try {
      const response = await fetch('/api/agents');
      if (response.ok) {
        const data = await response.json();
        const agentsArray = data.agents || [];
        setAgents(Array.isArray(agentsArray) ? agentsArray : []);
      }
    } catch (error) {
      console.error('Erro ao carregar agentes:', error);
    }
  };

  const createServer = async () => {
    if (!newServer.name || !newServer.type) return;

    try {
      const payload = {
        name: newServer.name,
        description: newServer.description,
        type: newServer.type,
        ...(newServer.type === 'stdio' && { command: newServer.command }),
        ...(newServer.args && { args: JSON.parse(newServer.args || '[]') }),
        ...((newServer.type === 'sse' || newServer.type === 'http') && { url: newServer.url }),
        ...(newServer.env && { env: JSON.parse(newServer.env || '{}') }),
        ...(newServer.headers && { headers: JSON.parse(newServer.headers || '{}') })
      };

      const response = await fetch('/admin/api/mcp/servers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        setIsCreateServerOpen(false);
        setNewServer({
          name: '',
          description: '',
          type: 'stdio',
          command: '',
          args: '',
          url: '',
          env: '',
          headers: ''
        });
        loadServers();
      }
    } catch (error) {
      console.error('Erro ao criar servidor MCP:', error);
    }
  };

  const testConnection = async () => {
    if (!testConfig.type) return;

    setTestingServer('test');
    
    try {
      const payload = {
        type: testConfig.type,
        ...(testConfig.type === 'stdio' && { command: testConfig.command }),
        ...(testConfig.args && { args: JSON.parse(testConfig.args || '[]') }),
        ...((testConfig.type === 'sse' || testConfig.type === 'http') && { url: testConfig.url }),
        ...(testConfig.env && { env: JSON.parse(testConfig.env || '{}') }),
        ...(testConfig.headers && { headers: JSON.parse(testConfig.headers || '{}') })
      };

      const response = await fetch('/admin/api/mcp/servers/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();
      
      if (result.success) {
        alert(`Conexão bem-sucedida! Encontradas ${result.tools.length} ferramentas.`);
      } else {
        alert(`Erro na conexão: ${result.error}`);
      }
    } catch (error) {
      console.error('Erro ao testar conexão:', error);
      alert('Erro ao testar conexão');
    } finally {
      setTestingServer(null);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-500';
      case 'inactive': return 'bg-gray-500';
      case 'error': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'inactive': return <XCircle className="w-4 h-4 text-gray-500" />;
      case 'error': return <XCircle className="w-4 h-4 text-red-500" />;
      default: return <XCircle className="w-4 h-4 text-gray-500" />;
    }
  };

  const serverTemplates = [
    {
      name: 'GitHub MCP',
      description: 'Servidor MCP para integração com GitHub API',
      type: 'stdio' as const,
      command: 'npx',
      args: ['@modelcontextprotocol/server-github'],
      env: { GITHUB_PERSONAL_ACCESS_TOKEN: 'seu_token_aqui' }
    },
    {
      name: 'PostgreSQL MCP',
      description: 'Servidor MCP para consultas PostgreSQL',
      type: 'stdio' as const,
      command: 'npx',
      args: ['@modelcontextprotocol/server-postgres'],
      env: { DATABASE_URL: 'postgresql://user:pass@localhost:5432/db' }
    },
    {
      name: 'Brave Search MCP',
      description: 'Servidor MCP para busca web com Brave Search',
      type: 'stdio' as const,
      command: 'npx',
      args: ['@modelcontextprotocol/server-brave-search'],
      env: { BRAVE_SEARCH_API_KEY: 'sua_chave_aqui' }
    }
  ];

  const applyTemplate = (template: typeof serverTemplates[0]) => {
    setNewServer({
      name: template.name,
      description: template.description,
      type: template.type,
      command: template.command,
      args: JSON.stringify(template.args, null, 2),
      url: '',
      env: JSON.stringify(template.env, null, 2),
      headers: ''
    });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">MCP Manager</h2>
          <p className="text-muted-foreground">
            Gerencie servidores e ferramentas do Model Context Protocol
          </p>
        </div>
        <div className="flex space-x-2">
          <Dialog open={isTestConnectionOpen} onOpenChange={setIsTestConnectionOpen}>
            <DialogTrigger asChild>
              <Button variant="outline">
                <Play className="w-4 h-4 mr-2" />
                Testar Conexão
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Testar Conexão MCP</DialogTitle>
                <DialogDescription>
                  Teste a conexão com um servidor MCP antes de adicioná-lo
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium">Tipo</label>
                  <Select 
                    value={testConfig.type} 
                    onValueChange={(value: any) => setTestConfig({...testConfig, type: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="stdio">STDIO</SelectItem>
                      <SelectItem value="sse">SSE</SelectItem>
                      <SelectItem value="http">HTTP</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {testConfig.type === 'stdio' && (
                  <div>
                    <label className="text-sm font-medium">Comando</label>
                    <Input
                      value={testConfig.command}
                      onChange={(e) => setTestConfig({...testConfig, command: e.target.value})}
                      placeholder="Ex: npx"
                    />
                  </div>
                )}
                
                {(testConfig.type === 'sse' || testConfig.type === 'http') && (
                  <div>
                    <label className="text-sm font-medium">URL</label>
                    <Input
                      value={testConfig.url}
                      onChange={(e) => setTestConfig({...testConfig, url: e.target.value})}
                      placeholder="Ex: http://localhost:3001/mcp"
                    />
                  </div>
                )}
                
                <div>
                  <label className="text-sm font-medium">Argumentos (JSON)</label>
                  <Textarea
                    value={testConfig.args}
                    onChange={(e) => setTestConfig({...testConfig, args: e.target.value})}
                    placeholder='["@modelcontextprotocol/server-github"]'
                    rows={3}
                  />
                </div>
                
                <div>
                  <label className="text-sm font-medium">Variáveis de Ambiente (JSON)</label>
                  <Textarea
                    value={testConfig.env}
                    onChange={(e) => setTestConfig({...testConfig, env: e.target.value})}
                    placeholder='{"GITHUB_PERSONAL_ACCESS_TOKEN": "seu_token"}'
                    rows={3}
                  />
                </div>
                
                <Button 
                  onClick={testConnection} 
                  disabled={testingServer === 'test'}
                  className="w-full"
                >
                  {testingServer === 'test' ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Testando...
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4 mr-2" />
                      Testar Conexão
                    </>
                  )}
                </Button>
              </div>
            </DialogContent>
          </Dialog>
          
          <Dialog open={isCreateServerOpen} onOpenChange={setIsCreateServerOpen}>
            <DialogTrigger asChild>
              <Button className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700">
                <Plus className="w-4 h-4 mr-2" />
                Novo Servidor
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Adicionar Servidor MCP</DialogTitle>
                <DialogDescription>
                  Configure um novo servidor MCP para expandir as capacidades dos agentes
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                {/* Templates */}
                <div>
                  <label className="text-sm font-medium mb-2 block">Templates Rápidos</label>
                  <div className="grid grid-cols-1 gap-2">
                    {serverTemplates.map((template, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        className="justify-start h-auto p-3"
                        onClick={() => applyTemplate(template)}
                      >
                        <div className="text-left">
                          <div className="font-medium">{template.name}</div>
                          <div className="text-xs text-muted-foreground">{template.description}</div>
                        </div>
                      </Button>
                    ))}
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Nome</label>
                  <Input
                    value={newServer.name}
                    onChange={(e) => setNewServer({...newServer, name: e.target.value})}
                    placeholder="Nome do servidor"
                  />
                </div>
                
                <div>
                  <label className="text-sm font-medium">Descrição</label>
                  <Textarea
                    value={newServer.description}
                    onChange={(e) => setNewServer({...newServer, description: e.target.value})}
                    placeholder="Descrição do servidor"
                    rows={2}
                  />
                </div>
                
                <div>
                  <label className="text-sm font-medium">Tipo</label>
                  <Select 
                    value={newServer.type} 
                    onValueChange={(value: any) => setNewServer({...newServer, type: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="stdio">STDIO</SelectItem>
                      <SelectItem value="sse">SSE</SelectItem>
                      <SelectItem value="http">HTTP</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {newServer.type === 'stdio' && (
                  <div>
                    <label className="text-sm font-medium">Comando</label>
                    <Input
                      value={newServer.command}
                      onChange={(e) => setNewServer({...newServer, command: e.target.value})}
                      placeholder="Ex: npx"
                    />
                  </div>
                )}
                
                {(newServer.type === 'sse' || newServer.type === 'http') && (
                  <div>
                    <label className="text-sm font-medium">URL</label>
                    <Input
                      value={newServer.url}
                      onChange={(e) => setNewServer({...newServer, url: e.target.value})}
                      placeholder="Ex: http://localhost:3001/mcp"
                    />
                  </div>
                )}
                
                <div>
                  <label className="text-sm font-medium">Argumentos (JSON)</label>
                  <Textarea
                    value={newServer.args}
                    onChange={(e) => setNewServer({...newServer, args: e.target.value})}
                    placeholder='["@modelcontextprotocol/server-github"]'
                    rows={3}
                  />
                </div>
                
                <div>
                  <label className="text-sm font-medium">Variáveis de Ambiente (JSON)</label>
                  <Textarea
                    value={newServer.env}
                    onChange={(e) => setNewServer({...newServer, env: e.target.value})}
                    placeholder='{"GITHUB_PERSONAL_ACCESS_TOKEN": "seu_token"}'
                    rows={3}
                  />
                </div>
                
                {(newServer.type === 'sse' || newServer.type === 'http') && (
                  <div>
                    <label className="text-sm font-medium">Headers (JSON)</label>
                    <Textarea
                      value={newServer.headers}
                      onChange={(e) => setNewServer({...newServer, headers: e.target.value})}
                      placeholder='{"Authorization": "Bearer token"}'
                      rows={3}
                    />
                  </div>
                )}
                
                <Button onClick={createServer} className="w-full">
                  Criar Servidor
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Server className="w-5 h-5 text-blue-500" />
              <div>
                <div className="text-2xl font-bold">{servers.length}</div>
                <div className="text-xs text-muted-foreground">Servidores</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Wrench className="w-5 h-5 text-green-500" />
              <div>
                <div className="text-2xl font-bold">{tools.length}</div>
                <div className="text-xs text-muted-foreground">Ferramentas</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              <div>
                <div className="text-2xl font-bold">
                  {servers.filter(s => s.status === 'active').length}
                </div>
                <div className="text-xs text-muted-foreground">Ativos</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Link className="w-5 h-5 text-purple-500" />
              <div>
                <div className="text-2xl font-bold">
                  {servers.reduce((acc, s) => acc + s.connections.length, 0)}
                </div>
                <div className="text-xs text-muted-foreground">Conexões</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Servers List */}
      <Card>
        <CardHeader>
          <CardTitle>Servidores MCP</CardTitle>
          <CardDescription>
            Servidores MCP configurados no sistema
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {servers.map((server) => (
              <div key={server.id} className="border rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    {getStatusIcon(server.status)}
                    <div>
                      <h3 className="font-medium">{server.name}</h3>
                      <p className="text-sm text-muted-foreground">{server.description}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline">{server.type.toUpperCase()}</Badge>
                    <Badge 
                      variant={server.status === 'active' ? 'default' : 'secondary'}
                      className={
                        server.status === 'active' ? 'bg-green-100 text-green-800' :
                        server.status === 'error' ? 'bg-red-100 text-red-800' : ''
                      }
                    >
                      {server.status}
                    </Badge>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="font-medium">Comando/URL:</span>
                    <div className="text-muted-foreground">
                      {server.type === 'stdio' ? server.command : server.url}
                    </div>
                  </div>
                  <div>
                    <span className="font-medium">Ferramentas:</span>
                    <div className="text-muted-foreground">{server._count.tools}</div>
                  </div>
                  <div>
                    <span className="font-medium">Conexões:</span>
                    <div className="text-muted-foreground">{server._count.connections}</div>
                  </div>
                </div>
                
                {server.lastConnected && (
                  <div className="mt-2 text-xs text-muted-foreground">
                    Última conexão: {new Date(server.lastConnected).toLocaleString()}
                  </div>
                )}
              </div>
            ))}
            
            {servers.length === 0 && (
              <div className="text-center py-8 text-muted-foreground">
                <Server className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <p>Nenhum servidor MCP configurado</p>
                <p className="text-sm">Adicione um servidor para começar</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}